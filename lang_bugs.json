[
    {
        "bugId": 1,
        "changedFiles": {
            "org/apache/commons/lang3/math/NumberUtils.java": {
                "changes": [
                    [
                        468
                    ],
                    [
                        471
                    ]
                ],
                "inserts": [
                    [
                        467
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -464,11 +464,20 @@ public static Number createNumber(final String str) throws NumberFormatException\n             }\n         }\n         if (pfxLen > 0) { // we have a hex number\n+            char firstSigDigit = 0; // strip leading zeroes\n+            for(int i = pfxLen; i < str.length(); i++) {\n+                firstSigDigit = str.charAt(i);\n+                if (firstSigDigit == '0') { // count leading zeroes\n+                    pfxLen++;\n+                } else {\n+                    break;\n+                }\n+            }\n             final int hexDigits = str.length() - pfxLen;\n-            if (hexDigits > 16) { // too many for Long\n+            if (hexDigits > 16 || (hexDigits == 16 && firstSigDigit > '7')) { // too many for Long\n                 return createBigInteger(str);\n             }\n-            if (hexDigits > 8) { // too many for an int\n+            if (hexDigits > 8 || (hexDigits == 8 && firstSigDigit > '7')) { // too many for an int\n                 return createLong(str);\n             }\n             return createInteger(str);\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.math.NumberUtilsTest",
                "error": "java.lang.NumberFormatException",
                "message": "For input string: \"80000000\"",
                "methodName": "TestLang747"
            }
        ],
        "metrics": {
            "chunks": 3,
            "classes": 1,
            "files": 1,
            "linesAdd": 9,
            "linesMod": 2,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 11,
            "spreadAllLines": 3,
            "spreadCodeOnly": 3
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignAdd",
            "condBranIfElseAdd",
            "condExpExpand",
            "loopAdd",
            "mcAdd",
            "varAdd"
        ],
        "repairPatterns": [
            "condBlockOthersAdd",
            "copyPaste",
            "expLogicExpand",
            "missComp"
        ],
        "repairTools": [],
        "revisionId": "687b2e62b7c6e81cd9d5c872b7fa9cc8fd3f1509"
    },
    {
        "bugId": 2,
        "changedFiles": {
            "org/apache/commons/lang3/LocaleUtils.java": {
                "inserts": [
                    [
                        92
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -89,6 +89,9 @@ public static Locale toLocale(final String str) {\n         if (str == null) {\n             return null;\n         }\n+        if (str.contains(\"#\")) { // LANG-879 - Cannot handle Java 7 script & extensions\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n         final int len = str.length();\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.LocaleUtilsTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Failed 2 test(s)",
                "methodName": "testParseAllLocales"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 3,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 3,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condBranIfAdd",
            "exThrowsAdd",
            "mcAdd",
            "objInstAdd"
        ],
        "repairPatterns": [
            "condBlockExcAdd"
        ],
        "repairTools": [],
        "revisionId": "09d39029b16dee61022dc8afde4d84f523f37813"
    },
    {
        "bugId": 3,
        "changedFiles": {
            "org/apache/commons/lang3/math/NumberUtils.java": {
                "inserts": [
                    [
                        593
                    ],
                    [
                        597
                    ],
                    [
                        601
                    ],
                    [
                        605
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -590,18 +590,22 @@ public static Number createNumber(final String str) throws NumberFormatException\n         //Must be a Float, Double, BigDecimal\n         final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n         try {\n+            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float\n                 final Float f = createFloat(str);\n                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                     return f;\n                 }\n+            }\n         } catch (final NumberFormatException nfe) { // NOPMD\n             // ignore the bad number\n         }\n         try {\n+            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double\n                 final Double d = createDouble(str);\n                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                     return d;\n                 }\n+            }\n         } catch (final NumberFormatException nfe) { // NOPMD\n             // ignore the bad number\n         }\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.math.NumberUtilsTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "",
                "methodName": "testStringCreateNumberEnsureNoPrecisionLoss"
            }
        ],
        "metrics": {
            "chunks": 4,
            "classes": 1,
            "files": 1,
            "linesAdd": 4,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 4,
            "spreadAllLines": 12,
            "spreadCodeOnly": 11
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condBranIfAdd"
        ],
        "repairPatterns": [
            "copyPaste",
            "wrapsIf"
        ],
        "repairTools": [],
        "revisionId": "2c9c8753165dc7ce5dd1d5a6d741b445b33302c2"
    },
    {
        "bugId": 4,
        "changedFiles": {
            "org/apache/commons/lang3/text/translate/LookupTranslator.java": {
                "changes": [
                    [
                        31
                    ],
                    [
                        46
                    ],
                    [
                        51
                    ],
                    [
                        77
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java\n@@ -28,7 +28,7 @@\n  */\n public class LookupTranslator extends CharSequenceTranslator {\n \n-    private final HashMap<CharSequence, CharSequence> lookupMap;\n+    private final HashMap<String, CharSequence> lookupMap;\n     private final int shortest;\n     private final int longest;\n \n@@ -43,12 +43,12 @@\n      * @param lookup CharSequence[][] table of size [*][2]\n      */\n     public LookupTranslator(final CharSequence[]... lookup) {\n-        lookupMap = new HashMap<CharSequence, CharSequence>();\n+        lookupMap = new HashMap<String, CharSequence>();\n         int _shortest = Integer.MAX_VALUE;\n         int _longest = 0;\n         if (lookup != null) {\n             for (final CharSequence[] seq : lookup) {\n-                this.lookupMap.put(seq[0], seq[1]);\n+                this.lookupMap.put(seq[0].toString(), seq[1]);\n                 final int sz = seq[0].length();\n                 if (sz < _shortest) {\n                     _shortest = sz;\n@@ -74,7 +74,7 @@ public int translate(final CharSequence input, final int index, final Writer out\n         // descend so as to get a greedy algorithm\n         for (int i = max; i >= shortest; i--) {\n             final CharSequence subSeq = input.subSequence(index, index + i);\n-            final CharSequence result = lookupMap.get(subSeq);\n+            final CharSequence result = lookupMap.get(subSeq.toString());\n             if (result != null) {\n                 out.write(result.toString());\n                 return i;\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.text.translate.LookupTranslatorTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Incorrect codepoint consumption expected:<3> but was:<0>",
                "methodName": "testLang882"
            }
        ],
        "metrics": {
            "chunks": 4,
            "classes": 1,
            "files": 1,
            "linesAdd": 0,
            "linesMod": 4,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 4,
            "spreadAllLines": 43,
            "spreadCodeOnly": 27
        },
        "observations": "Type change with adjust in related calls/operations.",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignExpChange",
            "mcAdd",
            "objInstMod",
            "varReplMc",
            "varTyChange"
        ],
        "repairPatterns": [
            "initFix",
            "wrongVarRef"
        ],
        "repairTools": [],
        "revisionId": "fb47b96ab635d7cc6e9edefdddc46f1baf63b117"
    },
    {
        "bugId": 5,
        "changedFiles": {
            "org/apache/commons/lang3/LocaleUtils.java": {
                "inserts": [
                    [
                        97
                    ],
                    [
                        128
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -94,6 +94,26 @@ public static Locale toLocale(final String str) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n+        if (ch0 == '_') {\n+            if (len < 3) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            final char ch1 = str.charAt(1);\n+            final char ch2 = str.charAt(2);\n+            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            if (len == 3) {\n+                return new Locale(\"\", str.substring(1, 3));\n+            }\n+            if (len < 5) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            if (str.charAt(3) != '_') {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            return new Locale(\"\", str.substring(1, 3), str.substring(4));\n+        } else {\n             final char ch1 = str.charAt(1);\n             if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n@@ -125,6 +145,7 @@ public static Locale toLocale(final String str) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.LocaleUtilsTest",
                "error": "java.lang.IllegalArgumentException",
                "message": "Invalid locale format: _GB",
                "methodName": "testLang865"
            }
        ],
        "metrics": {
            "chunks": 2,
            "classes": 1,
            "files": 1,
            "linesAdd": 21,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 21,
            "spreadAllLines": 31,
            "spreadCodeOnly": 31
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignAdd",
            "condBranIfElseAdd",
            "exThrowsAdd",
            "mcAdd",
            "objInstAdd",
            "retBranchAdd"
        ],
        "repairPatterns": [
            "condBlockExcAdd",
            "condBlockRetAdd",
            "wrapsIfElse"
        ],
        "repairTools": [],
        "revisionId": "75944e541d358d5b06ebbba3098a919fbf2539d4"
    },
    {
        "bugId": 6,
        "changedFiles": {
            "org/apache/commons/lang3/text/translate/CharSequenceTranslator.java": {
                "changes": [
                    [
                        95
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,7 @@ public final void translate(CharSequence input, Writer out) throws IOException {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+                pos += Character.charCount(Character.codePointAt(input, pt));\n             }\n         }\n     }\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.StringUtilsTest",
                "error": "java.lang.StringIndexOutOfBoundsException",
                "message": "String index out of range: 2",
                "methodName": "testEscapeSurrogatePairs"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 0,
            "linesMod": 1,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 1,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "mcParValChange",
            "varReplVar"
        ],
        "repairPatterns": [
            "expArithMod",
            "singleLine",
            "wrongVarRef"
        ],
        "repairTools": [
            "rtElixir",
            "rtHDRepair",
            "rtssFix"
        ],
        "revisionId": "cff0f1ae37bb2b7ab2dcdb10dec1f3cad7532e1c"
    },
    {
        "bugId": 7,
        "changedFiles": {
            "org/apache/commons/lang3/math/NumberUtils.java": {
                "deletes": [
                    [
                        452
                    ],
                    [
                        453
                    ],
                    [
                        454
                    ]
                ],
                "inserts": [
                    [
                        721,
                        722,
                        723,
                        724,
                        725
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -449,9 +449,6 @@ public static Number createNumber(String str) throws NumberFormatException {\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n-        if (str.startsWith(\"--\")) {\n-            return null;\n-        }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n@@ -718,10 +715,13 @@ public static BigDecimal createBigDecimal(String str) {\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }\n+        if (str.trim().startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n             // a wrong value.\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n         return new BigDecimal(str);\n     }\n \n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.math.NumberUtilsTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected NumberFormatException",
                "methodName": "testCreateNumber"
            }
        ],
        "metrics": {
            "chunks": 3,
            "classes": 1,
            "files": 1,
            "linesAdd": 3,
            "linesMod": 0,
            "linesRem": 3,
            "methods": 2,
            "sizeInLines": 6,
            "spreadAllLines": 270,
            "spreadCodeOnly": 167
        },
        "observations": "In one of the chunks, removes a conditional block with return.",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condExpMod",
            "exThrowsAdd",
            "mcAdd",
            "mcRem",
            "objInstAdd",
            "retRem"
        ],
        "repairPatterns": [
            "blockRemove",
            "condBlockExcAdd",
            "condBlockRem"
        ],
        "repairTools": [
            "rtAcs",
            "rtCardumen",
            "rtDeepRepair",
            "rtGPFL"
        ],
        "revisionId": "e71f6dd3f2f70c640ae73d28b432b3a69ffcab4b"
    },
    {
        "bugId": 8,
        "changedFiles": {
            "org/apache/commons/lang3/time/FastDatePrinter.java": {
                "deletes": [
                    [
                        1098
                    ],
                    [
                        1112
                    ]
                ],
                "inserts": [
                    [
                        1134
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java\n@@ -1095,7 +1095,6 @@ static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Local\n     private static class TimeZoneNameRule implements Rule {\n         private final Locale mLocale;\n         private final int mStyle;\n-        private final TimeZone zone;\n         private final String mStandard;\n         private final String mDaylight;\n \n@@ -1109,7 +1108,6 @@ static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Local\n         TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {\n             mLocale = locale;\n             mStyle = style;\n-            zone = timeZone;\n             \n             mStandard = getTimeZoneDisplay(timeZone, false, style, locale);\n             mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);\n@@ -1131,6 +1129,7 @@ public int estimateLength() {\n          */\n         @Override\n         public void appendTo(StringBuffer buffer, Calendar calendar) {\n+            TimeZone zone = calendar.getTimeZone();\n             if (zone.useDaylightTime()\n                     && calendar.get(Calendar.DST_OFFSET) != 0) {\n                 buffer.append(getTimeZoneDisplay(zone, true, mStyle, mLocale));\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.time.FastDateFormat_PrinterTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected:<11:03PM [CL]T> but was:<11:03PM [PS]T>",
                "methodName": "testCalendarTimezoneRespected"
            },
            {
                "className": " org.apache.commons.lang3.time.FastDatePrinterTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected:<11:03PM [CL]T> but was:<11:03PM [PS]T>",
                "methodName": "testCalendarTimezoneRespected"
            }
        ],
        "metrics": {
            "chunks": 3,
            "classes": 1,
            "files": 1,
            "linesAdd": 1,
            "linesMod": 0,
            "linesRem": 2,
            "methods": 2,
            "sizeInLines": 3,
            "spreadAllLines": 34,
            "spreadCodeOnly": 14
        },
        "observations": "Transformed a class attribute in local var.",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignAdd",
            "assignRem",
            "mcAdd",
            "varAdd",
            "varRem"
        ],
        "repairPatterns": [
            "initFix",
            "notClassified",
            "wrongComp"
        ],
        "repairTools": [],
        "revisionId": "a4a455053e7e4a77320efd6db0814f4de82d754d"
    },
    {
        "bugId": 9,
        "changedFiles": {
            "org/apache/commons/lang3/time/FastDateParser.java": {
                "inserts": [
                    [
                        144
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,9 @@ private void init() {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+        if (patternMatcher.regionStart() != patternMatcher.regionEnd()) {\n+            throw new IllegalArgumentException(\"Failed to parse \\\"\"+pattern+\"\\\" ; gave up at index \"+patternMatcher.regionStart());\n+        }\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.time.FastDateFormat_ParserTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Parsed dates should be equal expected:<null> but was:<Fri Jan 02 21:00:00 PST 1970>",
                "methodName": "testLANG_832"
            },
            {
                "className": " org.apache.commons.lang3.time.FastDateParserTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected FDF failure, but got Fri Jan 02 21:00:00 PST 1970 for ['d'd',d3] using d(\\p{IsNd}++)",
                "methodName": "testLANG_832"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 3,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 3,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condBranIfAdd",
            "exThrowsAdd",
            "mcAdd",
            "objInstAdd"
        ],
        "repairPatterns": [
            "condBlockExcAdd"
        ],
        "repairTools": [],
        "revisionId": "c45d5bff75edfef6387d40e681f9dc7c9b517bbb"
    },
    {
        "bugId": 10,
        "changedFiles": {
            "org/apache/commons/lang3/time/FastDateParser.java": {
                "deletes": [
                    [
                        304
                    ],
                    [
                        307
                    ],
                    [
                        308
                    ],
                    [
                        309
                    ],
                    [
                        310
                    ],
                    [
                        311
                    ],
                    [
                        312
                    ],
                    [
                        313
                    ],
                    [
                        314
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -301,17 +301,8 @@ public Date parse(String source, ParsePosition pos) {\n      * @return The <code>StringBuilder</code>\n      */\n     private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n         for(int i= 0; i<value.length(); ++i) {\n             char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n             switch(c) {\n             case '\\'':\n                 if(unquote) {\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.time.FastDateFormat_ParserTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Parsed dates should be equal expected:<null> but was:<Mon Mar 02 21:00:00 PST 1970>",
                "methodName": "testLANG_831"
            },
            {
                "className": " org.apache.commons.lang3.time.FastDateParserTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected FDF failure, but got Mon Mar 02 21:00:00 PST 1970 for [M E,3  Tue] using (\\p{IsNd}++)\\s*+(Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday)",
                "methodName": "testLANG_831"
            }
        ],
        "metrics": {
            "chunks": 2,
            "classes": 1,
            "files": 1,
            "linesAdd": 0,
            "linesMod": 0,
            "linesRem": 9,
            "methods": 1,
            "sizeInLines": 9,
            "spreadAllLines": 2,
            "spreadCodeOnly": 2
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignRem",
            "condBranIfAdd",
            "mcRem",
            "varRem"
        ],
        "repairPatterns": [
            "condBlockRem"
        ],
        "repairTools": [
            "rtCardumen",
            "rtDeepRepair"
        ],
        "revisionId": "afe5dff79fc23d222ba1f1481fbbf55e09d2e6da"
    },
    {
        "bugId": 11,
        "changedFiles": {
            "org/apache/commons/lang3/RandomStringUtils.java": {
                "inserts": [
                    [
                        245
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n@@ -242,6 +242,10 @@ public static String random(int count, int start, int end, boolean letters, bool\n                     start = ' ';                \n                 }\n             }\n+        } else {\n+            if (end <= start) {\n+                throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n+            }\n         }\n \n         char[] buffer = new char[count];\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.RandomStringUtilsTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Message (n must be positive) must contain 'start'",
                "methodName": "testLANG807"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 4,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 4,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condBranElseAdd",
            "condBranIfAdd",
            "exThrowsAdd",
            "objInstAdd"
        ],
        "repairPatterns": [
            "condBlockExcAdd",
            "condBlockOthersAdd"
        ],
        "repairTools": [],
        "revisionId": "c821fafce06adefc040e8983fb12d49399a48627"
    },
    {
        "bugId": 12,
        "changedFiles": {
            "org/apache/commons/lang3/RandomStringUtils.java": {
                "inserts": [
                    [
                        230,
                        231
                    ],
                    [
                        232
                    ],
                    [
                        238
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n@@ -227,14 +227,21 @@ public static String random(int count, int start, int end, boolean letters, bool\n         } else if (count < 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n+        if (chars != null && chars.length == 0) {\n+            throw new IllegalArgumentException(\"The chars array must not be empty\");\n+        }\n \n         if (start == 0 && end == 0) {\n+            if (chars != null) {\n+                end = chars.length;\n+            } else {\n                 if (!letters && !numbers) {\n                     end = Integer.MAX_VALUE;\n                 } else {\n                     end = 'z' + 1;\n                     start = ' ';                \n                 }\n+            }\n         }\n \n         char[] buffer = new char[count];\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.RandomStringUtilsTest",
                "error": "java.lang.ArrayIndexOutOfBoundsException",
                "message": "2094380118",
                "methodName": "testExceptions"
            },
            {
                "className": " org.apache.commons.lang3.RandomStringUtilsTest",
                "error": "java.lang.ArrayIndexOutOfBoundsException",
                "message": "117011530",
                "methodName": "testLANG805"
            }
        ],
        "metrics": {
            "chunks": 3,
            "classes": 1,
            "files": 1,
            "linesAdd": 7,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 7,
            "spreadAllLines": 8,
            "spreadCodeOnly": 7
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignAdd",
            "condBranIfAdd",
            "condBranIfElseAdd",
            "exThrowsAdd",
            "objInstAdd"
        ],
        "repairPatterns": [
            "condBlockExcAdd",
            "missNullCheckN",
            "wrapsIfElse"
        ],
        "repairTools": [],
        "revisionId": "c9d786a4fe2639581047d878a64bab6fb24f1ab3"
    },
    {
        "bugId": 13,
        "changedFiles": {
            "org/apache/commons/lang3/SerializationUtils.java": {
                "inserts": [
                    [
                        239
                    ],
                    [
                        250,
                        251,
                        252
                    ],
                    [
                        268
                    ],
                    [
                        269
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/SerializationUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/SerializationUtils.java\n@@ -217,58 +217,77 @@ public static Object deserialize(InputStream inputStream) {\n     public static Object deserialize(byte[] objectData) {\n         if (objectData == null) {\n             throw new IllegalArgumentException(\"The byte[] must not be null\");\n         }\n         ByteArrayInputStream bais = new ByteArrayInputStream(objectData);\n         return deserialize(bais);\n     }\n \n     /**\n      * <p>Custom specialization of the standard JDK {@link java.io.ObjectInputStream}\n      * that uses a custom  <code>ClassLoader</code> to resolve a class.\n      * If the specified <code>ClassLoader</code> is not able to resolve the class,\n      * the context classloader of the current thread will be used.\n      * This way, the standard deserialization work also in web-application\n      * containers and application servers, no matter in which of the\n      * <code>ClassLoader</code> the particular class that encapsulates\n      * serialization/deserialization lives. </p>\n      * \n      * <p>For more in-depth information about the problem for which this\n      * class here is a workaround, see the JIRA issue LANG-626. </p>\n      */\n      static class ClassLoaderAwareObjectInputStream extends ObjectInputStream {\n+        private static final Map<String, Class<?>> primitiveTypes = \n+                new HashMap<String, Class<?>>();\n         private ClassLoader classLoader;\n         \n         /**\n          * Constructor.\n          * @param in The <code>InputStream</code>.\n          * @param classLoader classloader to use\n          * @throws IOException if an I/O error occurs while reading stream header.\n          * @see java.io.ObjectInputStream\n          */\n         public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n             super(in);\n             this.classLoader = classLoader;\n \n+            primitiveTypes.put(\"byte\", byte.class);\n+            primitiveTypes.put(\"short\", short.class);\n+            primitiveTypes.put(\"int\", int.class);\n+            primitiveTypes.put(\"long\", long.class);\n+            primitiveTypes.put(\"float\", float.class);\n+            primitiveTypes.put(\"double\", double.class);\n+            primitiveTypes.put(\"boolean\", boolean.class);\n+            primitiveTypes.put(\"char\", char.class);\n+            primitiveTypes.put(\"void\", void.class);\n         }\n \n         /**\n          * Overriden version that uses the parametrized <code>ClassLoader</code> or the <code>ClassLoader</code>\n          * of the current <code>Thread</code> to resolve the class.\n          * @param desc An instance of class <code>ObjectStreamClass</code>.\n          * @return A <code>Class</code> object corresponding to <code>desc</code>.\n          * @throws IOException Any of the usual Input/Output exceptions.\n          * @throws ClassNotFoundException If class of a serialized object cannot be found.\n          */\n         @Override\n         protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n             String name = desc.getName();\n             try {\n                 return Class.forName(name, false, classLoader);\n             } catch (ClassNotFoundException ex) {\n+                try {\n                     return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+                } catch (ClassNotFoundException cnfe) {\n+                    Class<?> cls = primitiveTypes.get(name);\n+                    if (cls != null)\n+                        return cls;\n+                    else\n+                        throw cnfe;\n+                }\n             }\n         }\n \n     }\n \n }\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.SerializationUtilsTest",
                "error": "org.apache.commons.lang3.SerializationException",
                "message": "ClassNotFoundException while reading cloned object data",
                "methodName": "testPrimitiveTypeClassSerialization"
            }
        ],
        "metrics": {
            "chunks": 4,
            "classes": 1,
            "files": 1,
            "linesAdd": 19,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 2,
            "sizeInLines": 19,
            "spreadAllLines": 30,
            "spreadCodeOnly": 12
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignAdd",
            "condBranIfElseAdd",
            "exThrowsAdd",
            "exTryCatchAdd",
            "mcAdd",
            "objInstAdd",
            "retBranchAdd",
            "varAdd"
        ],
        "repairPatterns": [
            "condBlockExcAdd",
            "condBlockRetAdd",
            "initFix",
            "wrapsTryCatch"
        ],
        "repairTools": [],
        "revisionId": "bd59a1908a1df3364918be7b07782500616b15ac"
    },
    {
        "bugId": 14,
        "changedFiles": {
            "org/apache/commons/lang3/StringUtils.java": {
                "inserts": [
                    [
                        788
                    ],
                    [
                        789
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -785,7 +785,10 @@ public static boolean equals(CharSequence cs1, CharSequence cs2) {\n         if (cs1 == null || cs2 == null) {\n             return false;\n         }\n+        if (cs1 instanceof String && cs2 instanceof String) {\n             return cs1.equals(cs2);\n+        }\n+        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n     }\n \n     /**\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "",
                "methodName": "testEquals"
            }
        ],
        "metrics": {
            "chunks": 2,
            "classes": 1,
            "files": 1,
            "linesAdd": 3,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 3,
            "spreadAllLines": 1,
            "spreadCodeOnly": 1
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condBranIfAdd",
            "mcAdd",
            "retBranchAdd"
        ],
        "repairPatterns": [
            "wrapsIf"
        ],
        "repairTools": [
            "rtCardumen"
        ],
        "revisionId": "cf7211f9d7d70d56501d8c4c827bf9ce3cac5f0b"
    },
    {
        "bugId": 15,
        "changedFiles": {
            "org/apache/commons/lang3/reflect/TypeUtils.java": {
                "changes": [
                    [
                        219
                    ],
                    [
                        220
                    ],
                    [
                        221
                    ],
                    [
                        675
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java\n@@ -216,9 +216,9 @@ private static boolean isAssignable(Type type, ParameterizedType toParameterized\n                 toClass, typeVarAssigns);\n \n         // now to check each type argument\n-        for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {\n-            Type toTypeArg = entry.getValue();\n-            Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());\n+        for (TypeVariable<?> var : toTypeVarAssigns.keySet()) {\n+            Type toTypeArg = unrollVariableAssignments(var, toTypeVarAssigns);\n+            Type fromTypeArg = unrollVariableAssignments(var, fromTypeVarAssigns);\n \n             // parameters must either be absent from the subject type, within\n             // the bounds of the wildcard type, or be an exact match to the\n@@ -672,7 +672,7 @@ private static Type substituteTypeVariables(Type type, Map<TypeVariable<?>, Type\n                 : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);\n \n         // has target class been reached?\n-        if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {\n+        if (toClass.equals(cls)) {\n             return typeVarAssigns;\n         }\n \n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.reflect.TypeUtilsTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected:<2> but was:<0>",
                "methodName": "testGetTypeArguments"
            },
            {
                "className": " org.apache.commons.lang3.reflect.TypeUtilsTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "type class org.apache.commons.lang3.reflect.TypeUtilsTest$Thing not assignable to org.apache.commons.lang3.reflect.TypeUtilsTest.org.apache.commons.lang3.reflect.TypeUtilsTest$This<java.lang.String, java.lang.String>!",
                "methodName": "testIsAssignable"
            }
        ],
        "metrics": {
            "chunks": 2,
            "classes": 1,
            "files": 1,
            "linesAdd": 0,
            "linesMod": 4,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 4,
            "spreadAllLines": 453,
            "spreadCodeOnly": 226
        },
        "observations": "Change local var type.",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignExpChange",
            "condExpRed",
            "loopCondChange",
            "mcAdd"
        ],
        "repairPatterns": [
            "expLogicReduce",
            "wrongMethodRef"
        ],
        "repairTools": [],
        "revisionId": "8185a9e681d6de5f40b0ed07b40730c9761bad37"
    },
    {
        "bugId": 16,
        "changedFiles": {
            "org/apache/commons/lang3/math/NumberUtils.java": {
                "changes": [
                    [
                        458
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -455,7 +455,7 @@ public static Number createNumber(String str) throws NumberFormatException {\n             // a wrong value.\n             return null;\n         }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             return createInteger(str);\n         }   \n         char lastChar = str.charAt(str.length() - 1);\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.math.NumberUtilsTest",
                "error": "java.lang.NumberFormatException",
                "message": "0Xfade is not a valid number.",
                "methodName": "testCreateNumber"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 0,
            "linesMod": 1,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 1,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condExpExpand",
            "mcAdd"
        ],
        "repairPatterns": [
            "expLogicExpand",
            "singleLine"
        ],
        "repairTools": [],
        "revisionId": "13c7f19a5ad506340a7c8d8601ef4bf2426ab325"
    },
    {
        "bugId": 17,
        "changedFiles": {
            "org/apache/commons/lang3/text/translate/CharSequenceTranslator.java": {
                "changes": [
                    [
                        83
                    ]
                ],
                "deletes": [
                    [
                        90
                    ],
                    [
                        101
                    ],
                    [
                        94
                    ],
                    [
                        96
                    ],
                    [
                        97
                    ],
                    [
                        98
                    ],
                    [
                        102
                    ]
                ],
                "inserts": [
                    [
                        88,
                        89
                    ],
                    [
                        89
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -80,26 +80,20 @@ public final void translate(CharSequence input, Writer out) throws IOException {\n             return;\n         }\n         int pos = 0;\n-        int len = Character.codePointCount(input, 0, input.length());\n+        int len = input.length();\n         while (pos < len) {\n             int consumed = translate(input, pos, out);\n             if (consumed == 0) {\n                 char[] c = Character.toChars(Character.codePointAt(input, pos));\n                 out.write(c);\n+                pos+= c.length;\n+                continue;\n             }\n-            else {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                    if (pos < len - 2) {\n                 pos += Character.charCount(Character.codePointAt(input, pos));\n-                    } else {\n-                        pos++;\n-                    }\n-                }\n-                pos--;\n             }\n-            pos++;\n         }\n     }\n \n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.StringEscapeUtilsTest",
                "error": "junit.framework.ComparisonFailure",
                "message": "expected:<\ud842\udfb7[A]> but was:<\ud842\udfb7[?]>",
                "methodName": "testLang720"
            }
        ],
        "metrics": {
            "chunks": 6,
            "classes": 1,
            "files": 1,
            "linesAdd": 2,
            "linesMod": 1,
            "linesRem": 8,
            "methods": 1,
            "sizeInLines": 11,
            "spreadAllLines": 11,
            "spreadCodeOnly": 9
        },
        "observations": "Unwraps input.length() from \"Character.codePointCount()\" method. Unwraps \"for loop\" from else branch. Unwraps \"pos += ...\" from if-else branch.",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignAdd",
            "assignExpChange",
            "assignRem",
            "condBranIfElseAdd",
            "condBranRem",
            "mcRem"
        ],
        "repairPatterns": [
            "initFix",
            "missComp",
            "unwrapIfElse",
            "unwrapMethod"
        ],
        "repairTools": [],
        "revisionId": "b4255e6d071dc8d48bfc51037cecb29097b9a49d"
    },
    {
        "bugId": 18,
        "changedFiles": {
            "org/apache/commons/lang3/time/FastDateFormat.java": {
                "changes": [
                    [
                        495
                    ],
                    [
                        496
                    ],
                    [
                        498
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -492,10 +492,10 @@ private void init() {\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n-                if (tokenLen >= 4) {\n-                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n-                } else {\n+                if (tokenLen == 2) {\n                     rule = TwoDigitYearField.INSTANCE;\n+                } else {\n+                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case 'M': // month in year (text and number)\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.time.FastDateFormatTest",
                "error": "junit.framework.ComparisonFailure",
                "message": "expected:<AD AD AD AD 2003 [2003 03 20]03 January Jan 01 1 ...> but was:<AD AD AD AD 2003 [03 03 ]03 January Jan 01 1 ...>",
                "methodName": "testFormat"
            }
        ],
        "metrics": {
            "chunks": 2,
            "classes": 1,
            "files": 1,
            "linesAdd": 2,
            "linesMod": 1,
            "linesRem": 2,
            "methods": 1,
            "sizeInLines": 5,
            "spreadAllLines": 1,
            "spreadCodeOnly": 1
        },
        "observations": "An existent if-else structure is removed and a new one is placed in an action that resembles a wrap-with replacement. An aditional wrap-with-IfElse is present in IfElse-CondExp form.",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condBranIfElseAdd",
            "condExpMod",
            "mcParValChange"
        ],
        "repairPatterns": [
            "expLogicMod",
            "wrapsIfElse"
        ],
        "repairTools": [],
        "revisionId": "2aa9dca994b006ccbfcb528de5ff0da6a5578411"
    },
    {
        "bugId": 19,
        "changedFiles": {
            "org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java": {
                "changes": [
                    [
                        40
                    ],
                    [
                        54
                    ],
                    [
                        80
                    ]
                ],
                "inserts": [
                    [
                        48,
                        49,
                        50
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -37,7 +37,7 @@\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int seqEnd = input.length();\n         // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n+        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n \n@@ -47,11 +47,16 @@ public int translate(CharSequence input, int index, Writer out) throws IOExcepti\n                 isHex = true;\n \n                 // Check there's more than just an x after the &#\n+                if(start == seqEnd) {\n+                    return 0;\n+                }\n             }\n \n             int end = start;\n             // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n+            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||\n+                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||\n+                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )\n             {\n                 end++;\n             }\n@@ -76,8 +81,9 @@ public int translate(CharSequence input, int index, Writer out) throws IOExcepti\n                 out.write(entityValue);\n             }\n \n+            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);\n         }\n         return 0;\n     }\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest",
                "error": "java.lang.StringIndexOutOfBoundsException",
                "message": "String index out of range: 19",
                "methodName": "testUnfinishedEntity"
            },
            {
                "className": " org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest",
                "error": "java.lang.StringIndexOutOfBoundsException",
                "message": "String index out of range: 7",
                "methodName": "testOutOfBounds"
            }
        ],
        "metrics": {
            "chunks": 5,
            "classes": 1,
            "files": 1,
            "linesAdd": 6,
            "linesMod": 3,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 9,
            "spreadAllLines": 38,
            "spreadCodeOnly": 29
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignAdd",
            "condBranIfAdd",
            "condBranIfElseAdd",
            "condExpMod",
            "loopCondChange",
            "mcAdd",
            "mcRem",
            "retExpChange",
            "varAdd"
        ],
        "repairPatterns": [
            "condBlockRetAdd",
            "constChange",
            "expArithMod",
            "expLogicMod",
            "wrapsIfElse"
        ],
        "repairTools": [],
        "revisionId": "0b3a8a3128890f710700d04e38df48b883d11d91"
    },
    {
        "bugId": 20,
        "changedFiles": {
            "org/apache/commons/lang3/StringUtils.java": {
                "changes": [
                    [
                        3298
                    ],
                    [
                        3383
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -3295,7 +3295,7 @@ public static String join(Object[] array, char separator, int startIndex, int en\n             return EMPTY;\n         }\n         \n-        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);\n+        StringBuilder buf = new StringBuilder(noOfItems * 16);\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n@@ -3380,7 +3380,7 @@ public static String join(Object[] array, String separator, int startIndex, int\n             return EMPTY;\n         }\n \n-        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());\n+        StringBuilder buf = new StringBuilder(noOfItems * 16);\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.StringUtilsTest",
                "error": "java.lang.NullPointerException",
                "message": "",
                "methodName": "testJoin_ArrayChar"
            },
            {
                "className": " org.apache.commons.lang3.StringUtilsTest",
                "error": "java.lang.NullPointerException",
                "message": "",
                "methodName": "testJoin_Objectarray"
            }
        ],
        "metrics": {
            "chunks": 2,
            "classes": 1,
            "files": 1,
            "linesAdd": 0,
            "linesMod": 2,
            "linesRem": 0,
            "methods": 2,
            "sizeInLines": 2,
            "spreadAllLines": 84,
            "spreadCodeOnly": 27
        },
        "observations": "Null-Check is removed from \"buf\" initialization.",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignExpChange",
            "condBranRem",
            "mcRem",
            "objInstMod"
        ],
        "repairPatterns": [
            "condBlockRem",
            "copyPaste",
            "initFix"
        ],
        "repairTools": [
            "rtDeepRepair"
        ],
        "revisionId": "f08213cc4c35fd71e98aa5233fcb2db3333793a2"
    },
    {
        "bugId": 21,
        "changedFiles": {
            "org/apache/commons/lang3/time/DateUtils.java": {
                "changes": [
                    [
                        265
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n@@ -262,7 +262,7 @@ public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n         return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n                 cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n                 cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n-                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n+                cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n                 cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n                 cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                 cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.time.DateUtilsTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "LANG-677",
                "methodName": "testIsSameLocalTime_Cal"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 0,
            "linesMod": 1,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 1,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "mcParValChange",
            "retExpChange",
            "varReplVar"
        ],
        "repairPatterns": [
            "constChange",
            "expLogicMod",
            "singleLine",
            "wrongVarRef"
        ],
        "repairTools": [
            "rtssFix"
        ],
        "revisionId": "55f642725742513824975af0e5e91cb1920b6d72"
    },
    {
        "bugId": 22,
        "changedFiles": {
            "org/apache/commons/lang3/math/Fraction.java": {
                "changes": [
                    [
                        584
                    ]
                ],
                "inserts": [
                    [
                        582,
                        583,
                        584
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/math/Fraction.java\n+++ b/src/main/java/org/apache/commons/lang3/math/Fraction.java\n@@ -580,8 +580,14 @@ public Fraction pow(int power) {\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n         // From Commons Math:\n+        if ((u == 0) || (v == 0)) {\n+            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {\n+                throw new ArithmeticException(\"overflow: gcd is 2^31\");\n+            }\n+            return Math.abs(u) + Math.abs(v);\n+        }\n         //if either operand is abs 1, return 1:\n-        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n+        if (Math.abs(u) == 1 || Math.abs(v) == 1) {\n             return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.math.FractionTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected:<-1073741824> but was:<-2147483648>",
                "methodName": "testReducedFactory_int_int"
            },
            {
                "className": " org.apache.commons.lang3.math.FractionTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected:<-1073741824> but was:<-2147483648>",
                "methodName": "testReduce"
            }
        ],
        "metrics": {
            "chunks": 2,
            "classes": 1,
            "files": 1,
            "linesAdd": 6,
            "linesMod": 1,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 7,
            "spreadAllLines": 1,
            "spreadCodeOnly": 0
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condExpMod",
            "exThrowsAdd",
            "mcAdd",
            "objInstAdd",
            "retBranchAdd"
        ],
        "repairPatterns": [
            "condBlockExcAdd",
            "condBlockRetAdd",
            "expLogicMod",
            "missComp"
        ],
        "repairTools": [
            "rtCardumen",
            "rtDeepRepair",
            "rtGPFL"
        ],
        "revisionId": "0b2b82ad923b0455cde93286e3f504a1abd0863b"
    },
    {
        "bugId": 23,
        "changedFiles": {
            "org/apache/commons/lang3/text/ExtendedMessageFormat.java": {
                "inserts": [
                    [
                        73
                    ],
                    [
                        263
                    ],
                    [
                        269
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java\n@@ -70,6 +70,7 @@\n  */\n public class ExtendedMessageFormat extends MessageFormat {\n     private static final long serialVersionUID = -2362048321261811743L;\n+    private static final int HASH_SEED = 31;\n \n     private static final String DUMMY_PATTERN = \"\";\n     private static final String ESCAPED_QUOTE = \"''\";\n@@ -260,12 +261,42 @@ public void setFormatsByArgumentIndex(Format[] newFormats) {\n      * @param obj the object to compare to\n      * @return true if this object equals the other, otherwise false\n      */\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (!super.equals(obj)) {\n+            return false;\n+        }\n+        if (ObjectUtils.notEqual(getClass(), obj.getClass())) {\n+          return false;\n+        }\n+        ExtendedMessageFormat rhs = (ExtendedMessageFormat)obj;\n+        if (ObjectUtils.notEqual(toPattern, rhs.toPattern)) {\n+            return false;\n+        }\n+        if (ObjectUtils.notEqual(registry, rhs.registry)) {\n+            return false;\n+        }\n+        return true;\n+    }\n \n     /**\n      * Return the hashcode.\n      *\n      * @return the hashcode\n      */\n+    @Override\n+    public int hashCode() {\n+        int result = super.hashCode();\n+        result = HASH_SEED * result + ObjectUtils.hashCode(registry);\n+        result = HASH_SEED * result + ObjectUtils.hashCode(toPattern);\n+        return result;\n+    }\n \n     /**\n      * Get a custom format from a format description.\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.text.ExtendedMessageFormatTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "registry, hashcode()",
                "methodName": "testEqualsHashcode"
            }
        ],
        "metrics": {
            "chunks": 3,
            "classes": 1,
            "files": 1,
            "linesAdd": 31,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 2,
            "sizeInLines": 31,
            "spreadAllLines": 196,
            "spreadCodeOnly": 105
        },
        "observations": "Implements equals and hascode to work with hash structures of Collections",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignAdd",
            "condBranIfAdd",
            "mcAdd",
            "mdAdd",
            "mdOverride",
            "varAdd"
        ],
        "repairPatterns": [
            "condBlockRetAdd",
            "fixAPI",
            "wrongComp"
        ],
        "repairTools": [],
        "revisionId": "46356183872f2cba5e340993c6d85597a4f3cdbb"
    },
    {
        "bugId": 24,
        "changedFiles": {
            "org/apache/commons/lang3/math/NumberUtils.java": {
                "changes": [
                    [
                        1413
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -1410,7 +1410,7 @@ public static boolean isNumber(String str) {\n             if (chars[i] == 'l'\n                 || chars[i] == 'L') {\n                 // not allowing L with an exponent or decimal point\n-                return foundDigit && !hasExp;\n+                return foundDigit && !hasExp && !hasDecPoint;\n             }\n             // last character is illegal\n             return false;\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.math.NumberUtilsTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "isNumber(String) LANG-664 failed",
                "methodName": "testIsNumber"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 0,
            "linesMod": 1,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 1,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "retExpChange"
        ],
        "repairPatterns": [
            "expLogicExpand",
            "singleLine"
        ],
        "repairTools": [
            "rtAcs",
            "rtCardumen",
            "rtDeepRepair",
            "rtElixir",
            "rtGPFL",
            "rtJAID"
        ],
        "revisionId": "81903abbb25ff92597d5f1e3acc648d12bdee444"
    },
    {
        "bugId": 25,
        "changedFiles": {
            "org/apache/commons/lang3/text/translate/EntityArrays.java": {
                "changes": [
                    [
                        74
                    ],
                    [
                        75
                    ],
                    [
                        76
                    ],
                    [
                        77
                    ],
                    [
                        78
                    ],
                    [
                        79
                    ],
                    [
                        80
                    ],
                    [
                        81
                    ],
                    [
                        82
                    ],
                    [
                        83
                    ],
                    [
                        84
                    ],
                    [
                        85
                    ],
                    [
                        86
                    ],
                    [
                        87
                    ],
                    [
                        88
                    ],
                    [
                        89
                    ],
                    [
                        90
                    ],
                    [
                        91
                    ],
                    [
                        92
                    ],
                    [
                        93
                    ],
                    [
                        94
                    ],
                    [
                        95
                    ],
                    [
                        96
                    ],
                    [
                        97
                    ],
                    [
                        98
                    ],
                    [
                        99
                    ],
                    [
                        100
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -71,33 +71,33 @@\n         {\"\\u00C7\", \"&Ccedil;\"}, // \ufffd - uppercase C, cedilla\n         {\"\\u00C8\", \"&Egrave;\"}, // \ufffd - uppercase E, grave accent\n         {\"\\u00C9\", \"&Eacute;\"}, // \ufffd - uppercase E, acute accent\n-        {\"\\u00CB\", \"&Ecirc;\"}, // \ufffd - uppercase E, circumflex accent\n-        {\"\\u00CC\", \"&Euml;\"}, // \ufffd - uppercase E, umlaut\n-        {\"\\u00CD\", \"&Igrave;\"}, // \ufffd - uppercase I, grave accent\n-        {\"\\u00CE\", \"&Iacute;\"}, // \ufffd - uppercase I, acute accent\n-        {\"\\u00CF\", \"&Icirc;\"}, // \ufffd - uppercase I, circumflex accent\n-        {\"\\u00D0\", \"&Iuml;\"}, // \ufffd - uppercase I, umlaut\n-        {\"\\u00D1\", \"&ETH;\"}, // \ufffd - uppercase Eth, Icelandic\n-        {\"\\u00D2\", \"&Ntilde;\"}, // \ufffd - uppercase N, tilde\n-        {\"\\u00D3\", \"&Ograve;\"}, // \ufffd - uppercase O, grave accent\n-        {\"\\u00D4\", \"&Oacute;\"}, // \ufffd - uppercase O, acute accent\n-        {\"\\u00D5\", \"&Ocirc;\"}, // \ufffd - uppercase O, circumflex accent\n-        {\"\\u00D6\", \"&Otilde;\"}, // \ufffd - uppercase O, tilde\n-        {\"\\u00D7\", \"&Ouml;\"}, // \ufffd - uppercase O, umlaut\n-        {\"\\u00D8\", \"&times;\"}, // multiplication sign\n-        {\"\\u00D9\", \"&Oslash;\"}, // \ufffd - uppercase O, slash\n-        {\"\\u00DA\", \"&Ugrave;\"}, // \ufffd - uppercase U, grave accent\n-        {\"\\u00DB\", \"&Uacute;\"}, // \ufffd - uppercase U, acute accent\n-        {\"\\u00DC\", \"&Ucirc;\"}, // \ufffd - uppercase U, circumflex accent\n-        {\"\\u00DD\", \"&Uuml;\"}, // \ufffd - uppercase U, umlaut\n-        {\"\\u00DE\", \"&Yacute;\"}, // \ufffd - uppercase Y, acute accent\n-        {\"\\u00DF\", \"&THORN;\"}, // \ufffd - uppercase THORN, Icelandic\n-        {\"\\u00E0\", \"&szlig;\"}, // \ufffd - lowercase sharps, German\n-        {\"\\u00E1\", \"&agrave;\"}, // \ufffd - lowercase a, grave accent\n-        {\"\\u00E2\", \"&aacute;\"}, // \ufffd - lowercase a, acute accent\n-        {\"\\u00E3\", \"&acirc;\"}, // \ufffd - lowercase a, circumflex accent\n-        {\"\\u00E4\", \"&atilde;\"}, // \ufffd - lowercase a, tilde\n-        {\"\\u00E5\", \"&auml;\"}, // \ufffd - lowercase a, umlaut\n+        {\"\\u00CA\", \"&Ecirc;\"}, // \ufffd - uppercase E, circumflex accent\n+        {\"\\u00CB\", \"&Euml;\"}, // \ufffd - uppercase E, umlaut\n+        {\"\\u00CC\", \"&Igrave;\"}, // \ufffd - uppercase I, grave accent\n+        {\"\\u00CD\", \"&Iacute;\"}, // \ufffd - uppercase I, acute accent\n+        {\"\\u00CE\", \"&Icirc;\"}, // \ufffd - uppercase I, circumflex accent\n+        {\"\\u00CF\", \"&Iuml;\"}, // \ufffd - uppercase I, umlaut\n+        {\"\\u00D0\", \"&ETH;\"}, // \ufffd - uppercase Eth, Icelandic\n+        {\"\\u00D1\", \"&Ntilde;\"}, // \ufffd - uppercase N, tilde\n+        {\"\\u00D2\", \"&Ograve;\"}, // \ufffd - uppercase O, grave accent\n+        {\"\\u00D3\", \"&Oacute;\"}, // \ufffd - uppercase O, acute accent\n+        {\"\\u00D4\", \"&Ocirc;\"}, // \ufffd - uppercase O, circumflex accent\n+        {\"\\u00D5\", \"&Otilde;\"}, // \ufffd - uppercase O, tilde\n+        {\"\\u00D6\", \"&Ouml;\"}, // \ufffd - uppercase O, umlaut\n+        {\"\\u00D7\", \"&times;\"}, // multiplication sign\n+        {\"\\u00D8\", \"&Oslash;\"}, // \ufffd - uppercase O, slash\n+        {\"\\u00D9\", \"&Ugrave;\"}, // \ufffd - uppercase U, grave accent\n+        {\"\\u00DA\", \"&Uacute;\"}, // \ufffd - uppercase U, acute accent\n+        {\"\\u00DB\", \"&Ucirc;\"}, // \ufffd - uppercase U, circumflex accent\n+        {\"\\u00DC\", \"&Uuml;\"}, // \ufffd - uppercase U, umlaut\n+        {\"\\u00DD\", \"&Yacute;\"}, // \ufffd - uppercase Y, acute accent\n+        {\"\\u00DE\", \"&THORN;\"}, // \ufffd - uppercase THORN, Icelandic\n+        {\"\\u00DF\", \"&szlig;\"}, // \ufffd - lowercase sharps, German\n+        {\"\\u00E0\", \"&agrave;\"}, // \ufffd - lowercase a, grave accent\n+        {\"\\u00E1\", \"&aacute;\"}, // \ufffd - lowercase a, acute accent\n+        {\"\\u00E2\", \"&acirc;\"}, // \ufffd - lowercase a, circumflex accent\n+        {\"\\u00E3\", \"&atilde;\"}, // \ufffd - lowercase a, tilde\n+        {\"\\u00E4\", \"&auml;\"}, // \ufffd - lowercase a, umlaut\n         {\"\\u00E5\", \"&aring;\"}, // \ufffd - lowercase a, ring\n         {\"\\u00E6\", \"&aelig;\"}, // \ufffd - lowercase ae\n         {\"\\u00E7\", \"&ccedil;\"}, // \ufffd - lowercase c, cedilla\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.text.translate.EntityArraysTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "One or more errors detected",
                "methodName": "testISO8859_1_ESCAPE"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 0,
            "linesMod": 27,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 27,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "Changes keys in a vector of type key-value.",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "objInstMod"
        ],
        "repairPatterns": [
            "constChange",
            "initFix"
        ],
        "repairTools": [],
        "revisionId": "2bae68787d15c3d3540380164e62759485078ec1"
    },
    {
        "bugId": 26,
        "changedFiles": {
            "org/apache/commons/lang3/time/FastDateFormat.java": {
                "changes": [
                    [
                        820
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -817,7 +817,7 @@ public String format(long millis) {\n      * @return the formatted string\n      */\n     public String format(Date date) {\n-        Calendar c = new GregorianCalendar(mTimeZone);\n+        Calendar c = new GregorianCalendar(mTimeZone, mLocale);\n         c.setTime(date);\n         return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n     }\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.time.FastDateFormatTest",
                "error": "junit.framework.ComparisonFailure",
                "message": "expected:<fredag, week [53]> but was:<fredag, week [01]>",
                "methodName": "testLang645"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 0,
            "linesMod": 1,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 1,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "Adds a new parameter to constructor call (call overloaded constructor)",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "objInstMod"
        ],
        "repairPatterns": [
            "initFix",
            "singleLine",
            "wrongMethodRef"
        ],
        "repairTools": [
            "rtElixir"
        ],
        "revisionId": "75d5b74a1a7ef68c5169f4b44cdf972c1ab07ee0"
    },
    {
        "bugId": 27,
        "changedFiles": {
            "org/apache/commons/lang3/math/NumberUtils.java": {
                "changes": [
                    [
                        479
                    ]
                ],
                "inserts": [
                    [
                        489
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -476,7 +476,7 @@ public static Number createNumber(String str) throws NumberFormatException {\n         if (decPos > -1) {\n \n             if (expPos > -1) {\n-                if (expPos < decPos) {\n+                if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 dec = str.substring(decPos + 1, expPos);\n@@ -486,6 +486,9 @@ public static Number createNumber(String str) throws NumberFormatException {\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n+                if (expPos > str.length()) {\n+                    throw new NumberFormatException(str + \" is not a valid number.\");\n+                }\n                 mant = str.substring(0, expPos);\n             } else {\n                 mant = str;\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.math.NumberUtilsTest",
                "error": "java.lang.StringIndexOutOfBoundsException",
                "message": "String index out of range: 4",
                "methodName": "testCreateNumber"
            }
        ],
        "metrics": {
            "chunks": 2,
            "classes": 1,
            "files": 1,
            "linesAdd": 3,
            "linesMod": 1,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 4,
            "spreadAllLines": 9,
            "spreadCodeOnly": 9
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condExpExpand",
            "exThrowsAdd",
            "mcAdd",
            "objInstAdd"
        ],
        "repairPatterns": [
            "condBlockExcAdd",
            "expLogicExpand"
        ],
        "repairTools": [
            "rtCardumen",
            "rtDeepRepair"
        ],
        "revisionId": "c2560c028173c3bc0a4627d4ce5ce221bcc9be66"
    },
    {
        "bugId": 28,
        "changedFiles": {
            "org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java": {
                "inserts": [
                    [
                        62,
                        63
                    ],
                    [
                        64
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -60,7 +60,13 @@ public int translate(CharSequence input, int index, Writer out) throws IOExcepti\n                 return 0;\n             }\n \n+            if(entityValue > 0xFFFF) {\n+                char[] chrs = Character.toChars(entityValue);\n+                out.write(chrs[0]);\n+                out.write(chrs[1]);\n+            } else {\n                 out.write(entityValue);\n+            }\n             return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n         return 0;\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest",
                "error": "junit.framework.ComparisonFailure",
                "message": "Failed to unescape numeric entities supplementary characters expected:<[\ud803\udc22]> but was:<[\u0c22]>",
                "methodName": "testSupplementaryUnescaping"
            }
        ],
        "metrics": {
            "chunks": 2,
            "classes": 1,
            "files": 1,
            "linesAdd": 6,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 6,
            "spreadAllLines": 1,
            "spreadCodeOnly": 1
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condBranIfElseAdd",
            "mcAdd",
            "varAdd"
        ],
        "repairPatterns": [
            "wrapsIfElse"
        ],
        "repairTools": [],
        "revisionId": "3e1afecc200d7e3be9537c95b7cf52a7c5031300"
    },
    {
        "bugId": 29,
        "changedFiles": {
            "org/apache/commons/lang3/SystemUtils.java": {
                "changes": [
                    [
                        1672
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/SystemUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/SystemUtils.java\n@@ -1669,7 +1669,7 @@ static float toJavaVersionFloat(String version) {\n      * \n      * @return the version, for example 131 for Java 1.3.1\n      */\n-    static float toJavaVersionInt(String version) {\n+    static int toJavaVersionInt(String version) {\n         return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n     }\n \n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.SystemUtilsTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected:<0> but was:<0.0>",
                "methodName": "testJavaVersionAsInt"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 0,
            "linesMod": 1,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 1,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "Changes return type of method.",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "mdRetTyChange"
        ],
        "repairPatterns": [
            "singleLine"
        ],
        "repairTools": [],
        "revisionId": "982e295053663787bb0396b81a8956c3c87dc25b"
    },
    {
        "bugId": 30,
        "changedFiles": {
            "org/apache/commons/lang3/StringUtils.java": {
                "changes": [
                    [
                        1443
                    ],
                    [
                        1455
                    ],
                    [
                        1457
                    ],
                    [
                        1497
                    ],
                    [
                        1576
                    ]
                ],
                "inserts": [
                    [
                        1376,
                        1377
                    ],
                    [
                        1377
                    ],
                    [
                        1381,
                        1382
                    ],
                    [
                        1383
                    ],
                    [
                        1456,
                        1457
                    ],
                    [
                        1533,
                        1534
                    ],
                    [
                        1534
                    ],
                    [
                        1539
                    ],
                    [
                        1540
                    ],
                    [
                        1576
                    ],
                    [
                        1579
                    ],
                    [
                        1678,
                        1679
                    ],
                    [
                        1679
                    ],
                    [
                        1683,
                        1684,
                        1685
                    ],
                    [
                        1686
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1373,13 +1373,21 @@ public static int indexOfAny(CharSequence cs, char[] searchChars) {\n             return INDEX_NOT_FOUND;\n         }\n         int csLen = cs.length();\n+        int csLast = csLen - 1;\n         int searchLen = searchChars.length;\n+        int searchLast = searchLen - 1;\n         for (int i = 0; i < csLen; i++) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLen; j++) {\n                 if (searchChars[j] == ch) {\n+                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                         // ch is a supplementary character\n+                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                            return i;\n+                        }\n+                    } else {\n                         return i;\n+                    }\n                 }\n             }\n         }\n@@ -1440,7 +1448,7 @@ public static int indexOfAny(CharSequence cs, String searchChars) {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n+    public static boolean containsAny(String cs, char[] searchChars) {\n         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n             return false;\n         }\n@@ -1452,9 +1460,12 @@ public static boolean containsAny(CharSequence cs, char[] searchChars) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLength; j++) {\n                 if (searchChars[j] == ch) {\n-                    if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n+                    if (Character.isHighSurrogate(ch)) {\n+                        if (j == searchLast) {\n                             // missing low surrogate, fine, like String.indexOf(String)\n-                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                            return true;\n+                        }\n+                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                             return true;\n                         }\n                     } else {\n@@ -1494,7 +1505,7 @@ public static boolean containsAny(CharSequence cs, char[] searchChars) {\n      * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-    public static boolean containsAny(CharSequence cs, String searchChars) {\n+    public static boolean containsAny(String cs, String searchChars) {\n         if (searchChars == null) {\n             return false;\n         }\n@@ -1530,13 +1541,21 @@ public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {\n             return INDEX_NOT_FOUND;\n         }\n         int csLen = cs.length();\n+        int csLast = csLen - 1;\n         int searchLen = searchChars.length;\n+        int searchLast = searchLen - 1;\n         outer:\n         for (int i = 0; i < csLen; i++) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLen; j++) {\n                 if (searchChars[j] == ch) {\n+                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n+                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n+                            continue outer;\n+                        }\n+                    } else {\n                         continue outer;\n+                    }\n                 }\n             }\n             return i;\n@@ -1573,8 +1592,16 @@ public static int indexOfAnyBut(String str, String searchChars) {\n         int strLen = str.length();\n         for (int i = 0; i < strLen; i++) {\n             char ch = str.charAt(i);\n-            if (searchChars.indexOf(ch) < 0) {\n+            boolean chFound = searchChars.indexOf(ch) >= 0;\n+            if (i + 1 < strLen && Character.isHighSurrogate(ch)) {\n+                char ch2 = str.charAt(i + 1);\n+                if (chFound && searchChars.indexOf(ch2) < 0) {\n                     return i;\n+                }\n+            } else {\n+                if (!chFound) {\n+                    return i;\n+                }\n             }\n         }\n         return INDEX_NOT_FOUND;\n@@ -1675,14 +1702,25 @@ public static boolean containsNone(CharSequence cs, char[] searchChars) {\n             return true;\n         }\n         int csLen = cs.length();\n+        int csLast = csLen - 1;\n         int searchLen = searchChars.length;\n+        int searchLast = searchLen - 1;\n         for (int i = 0; i < csLen; i++) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLen; j++) {\n                 if (searchChars[j] == ch) {\n+                    if (Character.isHighSurrogate(ch)) {\n+                        if (j == searchLast) {\n                             // missing low surrogate, fine, like String.indexOf(String)\n+                            return false;\n+                        }\n+                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n+                            return false;\n+                        }\n+                    } else {\n                         // ch is in the Basic Multilingual Plane\n                         return false;\n+                    }\n                 }\n             }\n         }\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected:<true> but was:<false>",
                "methodName": "testContainsNone_CharArrayWithSupplementaryChars"
            },
            {
                "className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected:<true> but was:<false>",
                "methodName": "testContainsNone_StringWithSupplementaryChars"
            },
            {
                "className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected:<false> but was:<true>",
                "methodName": "testContainsAny_StringCharArrayWithBadSupplementaryChars"
            },
            {
                "className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected:<2> but was:<3>",
                "methodName": "testIndexOfAnyBut_StringStringWithSupplementaryChars"
            },
            {
                "className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected:<false> but was:<true>",
                "methodName": "testContainsAny_StringWithBadSupplementaryChars"
            },
            {
                "className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected:<2> but was:<0>",
                "methodName": "testIndexOfAny_StringCharArrayWithSupplementaryChars"
            },
            {
                "className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected:<2> but was:<3>",
                "methodName": "testIndexOfAnyBut_StringCharArrayWithSupplementaryChars"
            },
            {
                "className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected:<true> but was:<false>",
                "methodName": "testContainsNone_StringWithBadSupplementaryChars"
            },
            {
                "className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected:<2> but was:<0>",
                "methodName": "testIndexOfAny_StringStringWithSupplementaryChars"
            },
            {
                "className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected:<true> but was:<false>",
                "methodName": "testContainsNone_CharArrayWithBadSupplementaryChars"
            }
        ],
        "metrics": {
            "chunks": 20,
            "classes": 1,
            "files": 1,
            "linesAdd": 38,
            "linesMod": 5,
            "linesRem": 0,
            "methods": 6,
            "sizeInLines": 43,
            "spreadAllLines": 305,
            "spreadCodeOnly": 102
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignAdd",
            "condBranIfAdd",
            "condBranIfElseAdd",
            "condExpExpand",
            "condExpMod",
            "condExpRed",
            "mcAdd",
            "mcRem",
            "mdParTyChange",
            "retBranchAdd",
            "varAdd"
        ],
        "repairPatterns": [
            "condBlockOthersAdd",
            "condBlockRetAdd",
            "copyPaste",
            "expLogicExpand",
            "expLogicMod",
            "missComp",
            "wrapsIf",
            "wrapsIfElse"
        ],
        "repairTools": [],
        "revisionId": "19b6372018c6b800f8e2bf1b85e15ef4cbd500da"
    },
    {
        "bugId": 31,
        "changedFiles": {
            "org/apache/commons/lang3/StringUtils.java": {
                "inserts": [
                    [
                        1445,
                        1446
                    ],
                    [
                        1446
                    ],
                    [
                        1450,
                        1451,
                        1452
                    ],
                    [
                        1453
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1443,13 +1443,21 @@ public static boolean containsAny(CharSequence cs, char[] searchChars) {\n \t\t}\n \t\tint csLength = cs.length();\n \t\tint searchLength = searchChars.length;\n+\t\tint csLastIndex = csLength - 1;\n+\t\tint searchLastIndex = searchLength - 1;\n \t\tfor (int i = 0; i < csLength; i++) {\n \t\t\tchar ch = cs.charAt(i);\n \t\t\tfor (int j = 0; j < searchLength; j++) {\n \t\t\t\tif (searchChars[j] == ch) {\n+\t\t\t\t\tif (i < csLastIndex && j < searchLastIndex && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n \t\t\t\t\t\t// ch is a supplementary character\n+\t\t\t\t\t\tif (searchChars[j + 1] == cs.charAt(i + 1)) {\n+\t\t\t\t\t\t\treturn true;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n \t\t\t\t\t\t// ch is in the Basic Multilingual Plane\n \t\t\t\t\t\treturn true;\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected:<false> but was:<true>",
                "methodName": "testContainsAnyCharArrayWithSupplementaryChars"
            },
            {
                "className": " org.apache.commons.lang3.StringUtilsEqualsIndexOfTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected:<false> but was:<true>",
                "methodName": "testContainsAnyStringWithSupplementaryChars"
            }
        ],
        "metrics": {
            "chunks": 4,
            "classes": 1,
            "files": 1,
            "linesAdd": 8,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 8,
            "spreadAllLines": 7,
            "spreadCodeOnly": 5
        },
        "observations": "Partially the same as Lang 30",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condBranIfElseAdd",
            "mcAdd",
            "retBranchAdd",
            "varAdd"
        ],
        "repairPatterns": [
            "condBlockRetAdd",
            "missComp",
            "wrapsIfElse"
        ],
        "repairTools": [],
        "revisionId": "38bf7048571f3bc8dd34d14691906426444e4381"
    },
    {
        "bugId": 32,
        "changedFiles": {
            "org/apache/commons/lang3/builder/HashCodeBuilder.java": {
                "changes": [
                    [
                        104
                    ],
                    [
                        105
                    ],
                    [
                        106
                    ],
                    [
                        107
                    ],
                    [
                        108
                    ],
                    [
                        109
                    ],
                    [
                        152
                    ],
                    [
                        538
                    ]
                ],
                "inserts": [
                    [
                        522
                    ],
                    [
                        538
                    ],
                    [
                        539
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java\n@@ -101,12 +101,7 @@\n      * \n      * @since 2.3\n      */\n-    private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {\n-        @Override\n-        protected Set<IDKey> initialValue() {\n-            return new HashSet<IDKey>();\n-        }\n-    };\n+    private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>();\n \n     /*\n      * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()\n@@ -149,7 +144,8 @@\n      * @since 2.3\n      */\n     static boolean isRegistered(Object value) {\n-        return getRegistry().contains(new IDKey(value));\n+        Set<IDKey> registry = getRegistry();\n+        return registry != null && registry.contains(new IDKey(value));\n     }\n \n     /**\n@@ -519,6 +515,11 @@ public static int reflectionHashCode(Object object, String[] excludeFields) {\n      *            The object to register.\n      */\n     static void register(Object value) {\n+        synchronized (HashCodeBuilder.class) {\n+            if (getRegistry() == null) {\n+                REGISTRY.set(new HashSet<IDKey>());\n+            }\n+        }\n         getRegistry().add(new IDKey(value));\n     }\n \n@@ -535,7 +536,15 @@ static void register(Object value) {\n      * @since 2.3\n      */\n     static void unregister(Object value) {\n-        getRegistry().remove(new IDKey(value));\n+        Set<IDKey> s = getRegistry();\n+        if (s != null) {\n+            s.remove(new IDKey(value));\n+            synchronized (HashCodeBuilder.class) {\n+                if (s.isEmpty()) {\n+                    REGISTRY.remove();\n+                }\n+            }\n+        }\n     }\n \n     /**\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.builder.HashCodeBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: []",
                "methodName": "testReflectionObjectCycle"
            }
        ],
        "metrics": {
            "chunks": 4,
            "classes": 1,
            "files": 1,
            "linesAdd": 14,
            "linesMod": 3,
            "linesRem": 5,
            "methods": 3,
            "sizeInLines": 22,
            "spreadAllLines": 427,
            "spreadCodeOnly": 74
        },
        "observations": "Applies null check using synchronized block with object lock (HashCodeBuilder.class)",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condBranIfAdd",
            "mcAdd",
            "mdOverride",
            "mdRem",
            "objInstMod",
            "retExpChange",
            "varAdd"
        ],
        "repairPatterns": [
            "condBlockOthersAdd",
            "expLogicMod",
            "initFix",
            "missNullCheckN",
            "missNullCheckP"
        ],
        "repairTools": [],
        "revisionId": "006fca88e86bd6f650d4d021d2ff3573a572827d"
    },
    {
        "bugId": 33,
        "changedFiles": {
            "org/apache/commons/lang3/ClassUtils.java": {
                "changes": [
                    [
                        910
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/ClassUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ClassUtils.java\n@@ -907,7 +907,7 @@ private static String toCanonicalName(String className) {\n         }\n         Class<?>[] classes = new Class[array.length];\n         for (int i = 0; i < array.length; i++) {\n-            classes[i] = array[i].getClass();\n+            classes[i] = array[i] == null ? null : array[i].getClass();\n         }\n         return classes;\n     }\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.ClassUtilsTest",
                "error": "java.lang.NullPointerException",
                "message": "",
                "methodName": "testToClass_object"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 0,
            "linesMod": 1,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 1,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "Wrap-with applied with IfElse-Expression",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condBranIfElseAdd"
        ],
        "repairPatterns": [
            "missNullCheckP",
            "singleLine",
            "wrapsIfElse"
        ],
        "repairTools": [
            "rtElixir",
            "rtJAID",
            "rtssFix"
        ],
        "revisionId": "0603aef594fa60126c2d45f2ab164eee39f7b44c"
    },
    {
        "bugId": 34,
        "changedFiles": {
            "org/apache/commons/lang3/builder/ToStringStyle.java": {
                "changes": [
                    [
                        148
                    ],
                    [
                        164
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java\n@@ -145,7 +145,7 @@\n      * @return Set the registry of objects being traversed\n      */\n     static Map<Object, Object> getRegistry() {\n-        return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n+        return REGISTRY.get();\n     }\n \n     /**\n@@ -161,7 +161,7 @@\n      */\n     static boolean isRegistered(Object value) {\n         Map<Object, Object> m = getRegistry();\n-        return m.containsKey(value);\n+        return m != null && m.containsKey(value);\n     }\n \n     /**\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testObjectCycle"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionHierarchy"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testSelfInstanceTwoVarsReflectionObjectCycle"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionArrayCycle"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionLongArrayArray"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionArrayArrayCycle"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionFloatArray"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionDoubleArrayArray"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionBooleanArray"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionyteArray"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionDoubleArray"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionIntArrayArray"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionLongArray"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionhortArrayArray"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionObjectArray"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionObjectCycle"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionBooleanArrayArray"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testSimpleReflectionObjectCycle"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionByteArrayArray"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionArrayCycleLevel2"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionArrayAndObjectCycle"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionCharArrayArray"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionShortArray"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testSelfInstanceVarReflectionObjectCycle"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionIntArray"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionCharArray"
            },
            {
                "className": " org.apache.commons.lang3.builder.ToStringBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Expected: <null> but was: {}",
                "methodName": "testReflectionFloatArrayArray"
            }
        ],
        "metrics": {
            "chunks": 2,
            "classes": 1,
            "files": 1,
            "linesAdd": 0,
            "linesMod": 2,
            "linesRem": 0,
            "methods": 2,
            "sizeInLines": 2,
            "spreadAllLines": 15,
            "spreadCodeOnly": 3
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condBranRem",
            "mcRem",
            "retExpChange"
        ],
        "repairPatterns": [
            "expLogicExpand",
            "missNullCheckN",
            "unwrapIfElse"
        ],
        "repairTools": [],
        "revisionId": "496525b0d626dd5049528cdef61d71681154b660"
    },
    {
        "bugId": 35,
        "changedFiles": {
            "org/apache/commons/lang3/ArrayUtils.java": {
                "changes": [
                    [
                        3295
                    ],
                    [
                        3574
                    ]
                ]
            }
        },
        "diff": "--- a/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -3292,7 +3292,7 @@ public static boolean isEmpty(boolean[] array) {\n         } else if (element != null) {\n             type = element.getClass();\n         } else {\n-            type = Object.class;\n+            throw new IllegalArgumentException(\"Arguments cannot both be null\");            \n         }\n         @SuppressWarnings(\"unchecked\") // type must be T\n         T[] newArray = (T[]) copyArrayGrow1(array, type);\n@@ -3571,7 +3571,7 @@ private static Object copyArrayGrow1(Object array, Class<?> newArrayComponentTyp\n         } else if (element != null) {\n             clss = element.getClass();\n         } else {\n-            return (T[]) new Object[] { null };\n+            throw new IllegalArgumentException(\"Array and element cannot both be null\");            \n         }\n         @SuppressWarnings(\"unchecked\") // the add method creates an array of type clss, which is type T\n         final T[] newArray = (T[]) add(array, index, element, clss);\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.ArrayUtilsAddTest",
                "error": "java.lang.ClassCastException",
                "message": "[Ljava.lang.Object; cannot be cast to [Ljava.lang.String;",
                "methodName": "testLANG571"
            }
        ],
        "metrics": {
            "chunks": 2,
            "classes": 1,
            "files": 1,
            "linesAdd": 0,
            "linesMod": 2,
            "linesRem": 0,
            "methods": 2,
            "sizeInLines": 2,
            "spreadAllLines": 278,
            "spreadCodeOnly": 62
        },
        "observations": "Changes return of a null object to throw an Exception. The only statement of an existent \"else block\" is replaced by an exception throw.",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignRem",
            "exThrowsAdd",
            "objInstAdd",
            "retRem"
        ],
        "repairPatterns": [
            "notClassified"
        ],
        "repairTools": [
            "rtAcs"
        ],
        "revisionId": "80bd78ea0685d28ddec9b8162d652db9dec949ce"
    },
    {
        "bugId": 36,
        "changedFiles": {
            "org/apache/commons/lang3/math/NumberUtils.java": {
                "changes": [
                    [
                        491
                    ]
                ],
                "inserts": [
                    [
                        1388
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -488,7 +488,7 @@ public static Number createNumber(String str) throws NumberFormatException {\n             }\n             dec = null;\n         }\n-        if (!Character.isDigit(lastChar)) {\n+        if (!Character.isDigit(lastChar) && lastChar != '.') {\n             if (expPos > -1 && expPos < str.length() - 1) {\n                 exp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n@@ -1385,6 +1385,14 @@ public static boolean isNumber(String str) {\n                 // can't have an E at the last byte\n                 return false;\n             }\n+            if (chars[i] == '.') {\n+                if (hasDecPoint || hasExp) {\n+                    // two decimal points or dec in exponent\n+                    return false;\n+                }\n+                // single trailing decimal point after non-exponent is ok\n+                return foundDigit;\n+            }\n             if (!allowSigns\n                 && (chars[i] == 'd'\n                     || chars[i] == 'D'\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.math.NumberUtilsTest",
                "error": "java.lang.NumberFormatException",
                "message": "2. is not a valid number.",
                "methodName": "testCreateNumber"
            },
            {
                "className": " org.apache.commons.lang3.math.NumberUtilsTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "isNumber(String) LANG-521 failed",
                "methodName": "testIsNumber"
            }
        ],
        "metrics": {
            "chunks": 2,
            "classes": 1,
            "files": 1,
            "linesAdd": 8,
            "linesMod": 1,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 9,
            "spreadAllLines": 896,
            "spreadCodeOnly": 471
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condBranIfAdd",
            "condExpExpand",
            "retBranchAdd"
        ],
        "repairPatterns": [
            "condBlockRetAdd",
            "expLogicExpand"
        ],
        "repairTools": [],
        "revisionId": "da0612b348fcfa7679b92a5e9b8e1603e8e2da3a"
    },
    {
        "bugId": 37,
        "changedFiles": {
            "org/apache/commons/lang3/ArrayUtils.java": {
                "inserts": [
                    [
                        2962
                    ],
                    [
                        2963,
                        2964
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -2959,8 +2959,16 @@ public static boolean isEmpty(boolean[] array) {\n         final Class<?> type1 = array1.getClass().getComponentType();\n         T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+        try {\n             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+        } catch (ArrayStoreException ase) {\n             // Check if problem is incompatible types\n+            final Class<?> type2 = array2.getClass().getComponentType();\n+            if (!type1.isAssignableFrom(type2)){\n+                throw new IllegalArgumentException(\"Cannot store \"+type2.getName()+\" in an array of \"+type1.getName());\n+            }\n+            throw ase; // No, so rethrow original\n+        }\n         return joinedArray;\n     }\n \n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.ArrayUtilsAddTest",
                "error": "java.lang.ArrayStoreException",
                "message": "",
                "methodName": "testJira567"
            }
        ],
        "metrics": {
            "chunks": 3,
            "classes": 1,
            "files": 1,
            "linesAdd": 8,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 8,
            "spreadAllLines": 2,
            "spreadCodeOnly": 1
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignAdd",
            "condBranIfAdd",
            "exThrowsAdd",
            "exTryCatchAdd",
            "mcAdd",
            "objInstAdd",
            "varAdd"
        ],
        "repairPatterns": [
            "condBlockExcAdd",
            "wrapsTryCatch"
        ],
        "repairTools": [],
        "revisionId": "ea140fb5c327e2b58f6c5bf1057c7dede909a50c"
    },
    {
        "bugId": 38,
        "changedFiles": {
            "org/apache/commons/lang3/time/FastDateFormat.java": {
                "inserts": [
                    [
                        872
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -869,6 +869,7 @@ public StringBuffer format(Date date, StringBuffer buf) {\n      */\n     public StringBuffer format(Calendar calendar, StringBuffer buf) {\n         if (mTimeZoneForced) {\n+            calendar.getTime(); /// LANG-538\n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n         }\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.time.FastDateFormatTest",
                "error": "junit.framework.ComparisonFailure",
                "message": "dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>",
                "methodName": "testLang538"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 1,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 1,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "mcAdd"
        ],
        "repairPatterns": [
            "missComp",
            "singleLine"
        ],
        "repairTools": [
            "rtDeepRepair",
            "rtElixir",
            "rtGPFL",
            "rtJAID"
        ],
        "revisionId": "a95e76eefb91bdd9cf1c22734874a3d3c95ed327"
    },
    {
        "bugId": 39,
        "changedFiles": {
            "org/apache/commons/lang3/StringUtils.java": {
                "inserts": [
                    [
                        3676
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/java/org/apache/commons/lang3/StringUtils.java\n@@ -3673,6 +3673,9 @@ private static String replaceEach(String text, String[] searchList, String[] rep\n \n         // count the replacement text elements that are larger than their corresponding text being replaced\n         for (int i = 0; i < searchList.length; i++) {\n+            if (searchList[i] == null || replacementList[i] == null) {\n+                continue;\n+            }\n             int greater = replacementList[i].length() - searchList[i].length();\n             if (greater > 0) {\n                 increase += 3 * greater; // assume 3 matches\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang3.StringUtilsTest",
                "error": "java.lang.NullPointerException",
                "message": "",
                "methodName": "testReplace_StringStringArrayStringArray"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 3,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 3,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condBranIfAdd"
        ],
        "repairPatterns": [
            "condBlockOthersAdd",
            "missComp",
            "missNullCheckP"
        ],
        "repairTools": [
            "rtCardumen",
            "rtDeepRepair",
            "rtElixir",
            "rtGPFL",
            "rtJAID"
        ],
        "revisionId": "cb40e35f5e0990fad4c5278964fcc24e112dde8c"
    },
    {
        "bugId": 40,
        "changedFiles": {
            "org/apache/commons/lang/StringUtils.java": {
                "changes": [
                    [
                        1048
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n@@ -1045,7 +1045,14 @@ public static boolean containsIgnoreCase(String str, String searchStr) {\n         if (str == null || searchStr == null) {\n             return false;\n         }\n-        return contains(str.toUpperCase(), searchStr.toUpperCase());\n+        int len = searchStr.length();\n+        int max = str.length() - len;\n+        for (int i = 0; i <= max; i++) {\n+            if (str.regionMatches(true, i, searchStr, 0, len)) {\n+                return true;\n+            }\n+        }\n+        return false;\n     }\n \n     // IndexOfAny chars\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.StringUtilsEqualsIndexOfTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "en: 0 \u00df SS",
                "methodName": "testContainsIgnoreCase_LocaleIndependence"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 7,
            "linesMod": 1,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 8,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignAdd",
            "loopAdd",
            "mcAdd",
            "mcRem",
            "retBranchAdd",
            "retExpChange",
            "varAdd"
        ],
        "repairPatterns": [
            "condBlockRetAdd",
            "wrongComp"
        ],
        "repairTools": [],
        "revisionId": "8b1a8e178abb46cc048a3982636b8ec4e6ffc8dc"
    },
    {
        "bugId": 41,
        "changedFiles": {
            "org/apache/commons/lang/ClassUtils.java": {
                "changes": [
                    [
                        203
                    ],
                    [
                        245
                    ]
                ],
                "inserts": [
                    [
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196
                    ],
                    [
                        248,
                        249,
                        250,
                        251,
                        252
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n@@ -188,10 +188,23 @@ public static String getShortClassName(String className) {\n             return StringUtils.EMPTY;\n         }\n \n+        StringBuffer arrayPrefix = new StringBuffer();\n \n         // Handle array encoding\n+        if (className.startsWith(\"[\")) {\n+            while (className.charAt(0) == '[') {\n+                className = className.substring(1);\n+                arrayPrefix.append(\"[]\");\n+            }\n             // Strip Object type encoding\n+            if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {\n+                className = className.substring(1, className.length() - 1);\n+            }\n+        }\n \n+        if (reverseAbbreviationMap.containsKey(className)) {\n+            className = reverseAbbreviationMap.get(className);\n+        }\n \n         int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n         int innerIdx = className.indexOf(\n@@ -200,7 +213,7 @@ public static String getShortClassName(String className) {\n         if (innerIdx != -1) {\n             out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);\n         }\n-        return out;\n+        return out + arrayPrefix;\n     }\n \n     // Package name\n@@ -242,12 +255,18 @@ public static String getPackageName(Class<?> cls) {\n      * @return the package name or an empty string\n      */\n     public static String getPackageName(String className) {\n-        if (className == null) {\n+        if (className == null || className.length() == 0) {\n             return StringUtils.EMPTY;\n         }\n \n         // Strip array encoding\n+        while (className.charAt(0) == '[') {\n+            className = className.substring(1);\n+        }\n         // Strip Object type encoding\n+        if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {\n+            className = className.substring(1);\n+        }\n \n         int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n         if (i == -1) {\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.ClassUtilsTest",
                "error": "junit.framework.ComparisonFailure",
                "message": "expected:<String[[]]> but was:<String[;]>",
                "methodName": "test_getShortClassName_Class"
            },
            {
                "className": " org.apache.commons.lang.ClassUtilsTest",
                "error": "junit.framework.ComparisonFailure",
                "message": "expected:<[]java.lang> but was:<[[L]java.lang>",
                "methodName": "test_getPackageName_Class"
            }
        ],
        "metrics": {
            "chunks": 8,
            "classes": 1,
            "files": 1,
            "linesAdd": 19,
            "linesMod": 2,
            "linesRem": 0,
            "methods": 2,
            "sizeInLines": 21,
            "spreadAllLines": 58,
            "spreadCodeOnly": 23
        },
        "observations": "Existent condittional expression with null-check is expanded.",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignAdd",
            "condBranIfAdd",
            "condExpExpand",
            "loopAdd",
            "mcAdd",
            "objInstAdd",
            "retExpChange",
            "varAdd"
        ],
        "repairPatterns": [
            "condBlockOthersAdd",
            "expLogicExpand",
            "missComp"
        ],
        "repairTools": [],
        "revisionId": "4d3629f310e84cc24c0e5f09d97f5126692d0128"
    },
    {
        "bugId": 42,
        "changedFiles": {
            "org/apache/commons/lang/Entities.java": {
                "changes": [
                    [
                        828
                    ]
                ],
                "inserts": [
                    [
                        831
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/Entities.java\n+++ b/src/java/org/apache/commons/lang/Entities.java\n@@ -825,10 +825,15 @@ public String escape(String str) {\n     public void escape(Writer writer, String str) throws IOException {\n         int len = str.length();\n         for (int i = 0; i < len; i++) {\n-            char c = str.charAt(i);\n+            int c = Character.codePointAt(str, i); \n             String entityName = this.entityName(c);\n             if (entityName == null) {\n-                if (c > 0x7F) {\n+                if (c >= 0x010000 && i < len - 1) {\n+                    writer.write(\"&#\");\n+                    writer.write(Integer.toString(c, 10));\n+                    writer.write(';');\n+                    i++;\n+                } else if (c > 0x7F) { \n                     writer.write(\"&#\");\n                     writer.write(Integer.toString(c, 10));\n                     writer.write(';');\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.StringEscapeUtilsTest",
                "error": "junit.framework.ComparisonFailure",
                "message": "High unicode was not escaped correctly expected:<&#[119650];> but was:<&#[55348;&#57186];>",
                "methodName": "testEscapeHtmlHighUnicode"
            }
        ],
        "metrics": {
            "chunks": 2,
            "classes": 1,
            "files": 1,
            "linesAdd": 5,
            "linesMod": 2,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 7,
            "spreadAllLines": 2,
            "spreadCodeOnly": 2
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignAdd",
            "assignExpChange",
            "condBranIfElseAdd",
            "mcAdd",
            "mcRepl",
            "varTyChange"
        ],
        "repairPatterns": [
            "wrapsIfElse",
            "wrongComp",
            "wrongMethodRef"
        ],
        "repairTools": [],
        "revisionId": "dd2ae757d12554f290931f0b3c05e33ad993ecd1"
    },
    {
        "bugId": 43,
        "changedFiles": {
            "org/apache/commons/lang/text/ExtendedMessageFormat.java": {
                "inserts": [
                    [
                        422
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -419,6 +419,7 @@ private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n+            next(pos);\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n         int lastHold = start;\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.text.ExtendedMessageFormatTest",
                "error": "java.lang.OutOfMemoryError",
                "message": "Java heap space",
                "methodName": "testEscapedQuote_LANG_477"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 1,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 1,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "mcAdd"
        ],
        "repairPatterns": [
            "missComp",
            "singleLine"
        ],
        "repairTools": [
            "rtElixir",
            "rtHDRepair",
            "rtssFix"
        ],
        "revisionId": "eb3e2ae1f3734986a9f0225c661888baac3cb13b"
    },
    {
        "bugId": 44,
        "changedFiles": {
            "org/apache/commons/lang/NumberUtils.java": {
                "inserts": [
                    [
                        145
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,9 @@ public static Number createNumber(String val) throws NumberFormatException {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        if (val.length() == 1 && !Character.isDigit(val.charAt(0))) {\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n+        }\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.NumberUtilsTest",
                "error": "java.lang.StringIndexOutOfBoundsException",
                "message": "String index out of range: 0",
                "methodName": "testLang457"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 3,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 3,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condBranIfAdd",
            "exThrowsAdd",
            "mcAdd",
            "objInstAdd"
        ],
        "repairPatterns": [
            "condBlockExcAdd"
        ],
        "repairTools": [
            "rtDynaMoth",
            "rtElixir",
            "rtNopol"
        ],
        "revisionId": "81f10d7f1ef52d44f43b38d81ac3dc1c83d45134"
    },
    {
        "bugId": 45,
        "changedFiles": {
            "org/apache/commons/lang/WordUtils.java": {
                "inserts": [
                    [
                        613,
                        614,
                        615,
                        616,
                        617,
                        618
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -613,6 +613,9 @@ public static String abbreviate(String str, int lower, int upper, String appendT\n \n         // if the lower value is greater than the length of the string,\n         // set to the length of the string\n+        if (lower > str.length()) {\n+            lower = str.length();    \n+        }\n         // if the upper value is -1 (i.e. no limit) or is greater\n         // than the length of the string, set to the length of the string\n         if (upper == -1 || upper > str.length()) {\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.WordUtilsTest",
                "error": "java.lang.StringIndexOutOfBoundsException",
                "message": "String index out of range: 15",
                "methodName": "testAbbreviate"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 3,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 3,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignAdd",
            "condBranIfAdd",
            "mcAdd"
        ],
        "repairPatterns": [
            "condBlockOthersAdd",
            "missComp"
        ],
        "repairTools": [
            "rtJAID"
        ],
        "revisionId": "d95fcd8e24568b4f9d3cb9da922a4029e293c793"
    },
    {
        "bugId": 46,
        "changedFiles": {
            "org/apache/commons/lang/StringEscapeUtils.java": {
                "changes": [
                    [
                        86
                    ],
                    [
                        102
                    ],
                    [
                        127
                    ],
                    [
                        143
                    ],
                    [
                        154
                    ],
                    [
                        160
                    ],
                    [
                        178
                    ]
                ],
                "inserts": [
                    [
                        244
                    ],
                    [
                        245
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n@@ -83,7 +83,7 @@ public StringEscapeUtils() {\n      * @return String with escaped values, <code>null</code> if null string input\n      */\n     public static String escapeJava(String str) {\n-        return escapeJavaStyleString(str, false);\n+        return escapeJavaStyleString(str, false, false);\n     }\n \n     /**\n@@ -99,7 +99,7 @@ public static String escapeJava(String str) {\n      * @throws IOException if error occurs on underlying Writer\n      */\n     public static void escapeJava(Writer out, String str) throws IOException {\n-        escapeJavaStyleString(out, str, false);\n+        escapeJavaStyleString(out, str, false, false);\n     }\n \n     /**\n@@ -124,7 +124,7 @@ public static void escapeJava(Writer out, String str) throws IOException {\n      * @return String with escaped values, <code>null</code> if null string input\n      */\n     public static String escapeJavaScript(String str) {\n-        return escapeJavaStyleString(str, true);\n+        return escapeJavaStyleString(str, true, true);\n     }\n \n     /**\n@@ -140,7 +140,7 @@ public static String escapeJavaScript(String str) {\n      * @throws IOException if error occurs on underlying Writer\n      **/\n     public static void escapeJavaScript(Writer out, String str) throws IOException {\n-        escapeJavaStyleString(out, str, true);\n+        escapeJavaStyleString(out, str, true, true);\n     }\n \n     /**\n@@ -151,13 +151,13 @@ public static void escapeJavaScript(Writer out, String str) throws IOException {\n      * @param escapeForwardSlash TODO\n      * @return the escaped string\n      */\n-    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {\n+    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes, boolean escapeForwardSlash) {\n         if (str == null) {\n             return null;\n         }\n         try {\n             StringWriter writer = new StringWriter(str.length() * 2);\n-            escapeJavaStyleString(writer, str, escapeSingleQuotes);\n+            escapeJavaStyleString(writer, str, escapeSingleQuotes, escapeForwardSlash);\n             return writer.toString();\n         } catch (IOException ioe) {\n             // this should never ever happen while writing to a StringWriter\n@@ -175,7 +175,8 @@ private static String escapeJavaStyleString(String str, boolean escapeSingleQuot\n      * @param escapeForwardSlash TODO\n      * @throws IOException if an IOException occurs\n      */\n-    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n+    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote,\n+            boolean escapeForwardSlash) throws IOException {\n         if (out == null) {\n             throw new IllegalArgumentException(\"The Writer must not be null\");\n         }\n@@ -241,7 +242,9 @@ private static void escapeJavaStyleString(Writer out, String str, boolean escape\n                         out.write('\\\\');\n                         break;\n                     case '/' :\n+                        if (escapeForwardSlash) {\n                             out.write('\\\\');\n+                        }\n                         out.write('/');\n                         break;\n                     default :\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.StringEscapeUtilsTest",
                "error": "junit.framework.ComparisonFailure",
                "message": "expected:<...tring with a slash ([]/) in it> but was:<...tring with a slash ([\\]/) in it>",
                "methodName": "testEscapeJavaWithSlash"
            }
        ],
        "metrics": {
            "chunks": 9,
            "classes": 1,
            "files": 1,
            "linesAdd": 3,
            "linesMod": 7,
            "linesRem": 0,
            "methods": 6,
            "sizeInLines": 10,
            "spreadAllLines": 152,
            "spreadCodeOnly": 82
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condBranIfAdd",
            "mcParAdd",
            "mcRepl",
            "mdParAdd",
            "retExpChange"
        ],
        "repairPatterns": [
            "wrapsIf"
        ],
        "repairTools": [],
        "revisionId": "916639bda234a8e5a030361c4068667764b34cb7"
    },
    {
        "bugId": 47,
        "changedFiles": {
            "org/apache/commons/lang/text/StrBuilder.java": {
                "inserts": [
                    [
                        1186
                    ],
                    [
                        1230
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n@@ -1183,6 +1183,9 @@ public StrBuilder appendFixedWidthPadLeft(Object obj, int width, char padChar) {\n         if (width > 0) {\n             ensureCapacity(size + width);\n             String str = (obj == null ? getNullText() : obj.toString());\n+            if (str == null) {\n+                str = \"\";\n+            }\n             int strLen = str.length();\n             if (strLen >= width) {\n                 str.getChars(strLen - width, strLen, buffer, size);\n@@ -1227,6 +1230,9 @@ public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar)\n         if (width > 0) {\n             ensureCapacity(size + width);\n             String str = (obj == null ? getNullText() : obj.toString());\n+            if (str == null) {\n+                str = \"\";\n+            }\n             int strLen = str.length();\n             if (strLen >= width) {\n                 str.getChars(0, width, buffer, size);\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.text.StrBuilderTest",
                "error": "java.lang.NullPointerException",
                "message": "",
                "methodName": "testLang412Left"
            },
            {
                "className": " org.apache.commons.lang.text.StrBuilderTest",
                "error": "java.lang.NullPointerException",
                "message": "",
                "methodName": "testLang412Right"
            }
        ],
        "metrics": {
            "chunks": 2,
            "classes": 1,
            "files": 1,
            "linesAdd": 6,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 2,
            "sizeInLines": 6,
            "spreadAllLines": 44,
            "spreadCodeOnly": 21
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignAdd",
            "condBranIfAdd"
        ],
        "repairPatterns": [
            "condBlockOthersAdd",
            "copyPaste",
            "missNullCheckP"
        ],
        "repairTools": [],
        "revisionId": "d5e343049c2610c31ddacb24f0d173942f6d5ac9"
    },
    {
        "bugId": 48,
        "changedFiles": {
            "org/apache/commons/lang/builder/EqualsBuilder.java": {
                "inserts": [
                    [
                        380,
                        381
                    ],
                    [
                        382
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -377,8 +377,12 @@ public EqualsBuilder append(Object lhs, Object rhs) {\n         }\n         Class lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n+            if (lhs instanceof java.math.BigDecimal) {\n+                isEquals = (((java.math.BigDecimal)lhs).compareTo(rhs) == 0);\n+            } else {\n                 // The simple case, not an array, just test the element\n                 isEquals = lhs.equals(rhs);\n+            }\n         } else if (lhs.getClass() != rhs.getClass()) {\n             // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n             this.setEquals(false);\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.builder.EqualsBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "",
                "methodName": "testBigDecimal"
            }
        ],
        "metrics": {
            "chunks": 2,
            "classes": 1,
            "files": 1,
            "linesAdd": 4,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 4,
            "spreadAllLines": 2,
            "spreadCodeOnly": 1
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignAdd",
            "condBranIfElseAdd",
            "mcAdd"
        ],
        "repairPatterns": [
            "wrapsIfElse"
        ],
        "repairTools": [],
        "revisionId": "eb8f74efb75e71fc91e515a38becc2aac203e339"
    },
    {
        "bugId": 49,
        "changedFiles": {
            "org/apache/commons/lang/math/Fraction.java": {
                "inserts": [
                    [
                        466
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,9 @@ public double doubleValue() {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+        if (numerator == 0) {\n+            return equals(ZERO) ? this : ZERO;\n+        }\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.math.FractionTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected:<1> but was:<100>",
                "methodName": "testReduce"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 3,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 3,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condBranIfAdd",
            "condBranIfElseAdd",
            "mcAdd",
            "retBranchAdd"
        ],
        "repairPatterns": [
            "condBlockOthersAdd",
            "condBlockRetAdd"
        ],
        "repairTools": [],
        "revisionId": "0ac772a4e3b07287c435fdc3c812f67277c85cc8"
    },
    {
        "bugId": 50,
        "changedFiles": {
            "org/apache/commons/lang/time/FastDateFormat.java": {
                "changes": [
                    [
                        285
                    ],
                    [
                        465
                    ]
                ],
                "deletes": [
                    [
                        286
                    ],
                    [
                        292
                    ],
                    [
                        293
                    ],
                    [
                        294
                    ],
                    [
                        466
                    ],
                    [
                        471
                    ],
                    [
                        472
                    ],
                    [
                        473
                    ]
                ],
                "inserts": [
                    [
                        286,
                        287
                    ],
                    [
                        288,
                        289,
                        290
                    ],
                    [
                        466,
                        467
                    ],
                    [
                        468,
                        469
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang/time/FastDateFormat.java\n@@ -282,16 +282,14 @@ public static synchronized FastDateFormat getDateInstance(int style, TimeZone ti\n             key = new Pair(key, timeZone);\n         }\n \n-        if (locale != null) {\n-            key = new Pair(key, locale);\n+        if (locale == null) {\n+            locale = Locale.getDefault();\n         }\n \n+        key = new Pair(key, locale);\n \n         FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);\n         if (format == null) {\n-            if (locale == null) {\n-                locale = Locale.getDefault();\n-            }\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);\n                 String pattern = formatter.toPattern();\n@@ -462,15 +460,13 @@ public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int\n         if (timeZone != null) {\n             key = new Pair(key, timeZone);\n         }\n-        if (locale != null) {\n-            key = new Pair(key, locale);\n+        if (locale == null) {\n+            locale = Locale.getDefault();\n         }\n+        key = new Pair(key, locale);\n \n         FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n         if (format == null) {\n-            if (locale == null) {\n-                locale = Locale.getDefault();\n-            }\n             try {\n                 SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                         locale);\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.time.FastDateFormatTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected same:<de_DE> was not:<en_US>",
                "methodName": "test_changeDefault_Locale_DateInstance"
            },
            {
                "className": " org.apache.commons.lang.time.FastDateFormatTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected same:<de_DE> was not:<en_US>",
                "methodName": "test_changeDefault_Locale_DateTimeInstance"
            }
        ],
        "metrics": {
            "chunks": 6,
            "classes": 1,
            "files": 1,
            "linesAdd": 2,
            "linesMod": 4,
            "linesRem": 6,
            "methods": 2,
            "sizeInLines": 12,
            "spreadAllLines": 179,
            "spreadCodeOnly": 68
        },
        "observations": "Replaces some existent Null-Chek, inverting postive by negative.",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignAdd",
            "assignRem",
            "condBranRem",
            "condExpMod",
            "mcAdd",
            "mcRem",
            "objInstAdd",
            "objInstRem"
        ],
        "repairPatterns": [
            "condBlockRem",
            "copyPaste",
            "expLogicMod",
            "unwrapIfElse",
            "wrongComp"
        ],
        "repairTools": [],
        "revisionId": "659ef247b1452b6d5b9f92271357381fa59fea50"
    },
    {
        "bugId": 51,
        "changedFiles": {
            "org/apache/commons/lang/BooleanUtils.java": {
                "inserts": [
                    [
                        682
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/BooleanUtils.java\n+++ b/src/java/org/apache/commons/lang/BooleanUtils.java\n@@ -679,6 +679,7 @@ public static boolean toBoolean(String str) {\n                         (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                         (str.charAt(2) == 'S' || str.charAt(2) == 's');\n                 }\n+                return false;\n             }\n             case 4: {\n                 char ch = str.charAt(0);\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.BooleanUtilsTest",
                "error": "java.lang.StringIndexOutOfBoundsException",
                "message": "String index out of range: 3",
                "methodName": "test_toBoolean_String"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 1,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 1,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "Adds a return statement that does the role of an \"else\" branch.",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "retBranchAdd"
        ],
        "repairPatterns": [
            "singleLine"
        ],
        "repairTools": [
            "rtDynaMoth",
            "rtElixir",
            "rtJAID",
            "rtNopol"
        ],
        "revisionId": "a5589b39e985e64861bd920aa7b13ab32c215b06"
    },
    {
        "bugId": 52,
        "changedFiles": {
            "org/apache/commons/lang/StringEscapeUtils.java": {
                "inserts": [
                    [
                        222,
                        228,
                        232,
                        236
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n@@ -233,6 +233,10 @@ private static void escapeJavaStyleString(Writer out, String str, boolean escape\n                         out.write('\\\\');\n                         out.write('\\\\');\n                         break;\n+                    case '/':\n+                        out.write('\\\\');\n+                        out.write('/');\n+                        break;\n                     default :\n                         out.write(ch);\n                         break;\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.StringEscapeUtilsTest",
                "error": "junit.framework.ComparisonFailure",
                "message": "expected:<...ipt>alert(\\'aaa\\');<[\\]/script>\\';> but was:<...ipt>alert(\\'aaa\\');<[]/script>\\';>",
                "methodName": "testEscapeJavaScript"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 4,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 4,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condBranCaseAdd",
            "mcAdd"
        ],
        "repairPatterns": [
            "condBlockOthersAdd"
        ],
        "repairTools": [],
        "revisionId": "868f6976aea222e96259843f56df9aed8e48584b"
    },
    {
        "bugId": 53,
        "changedFiles": {
            "org/apache/commons/lang/time/DateUtils.java": {
                "deletes": [
                    [
                        643
                    ],
                    [
                        644
                    ],
                    [
                        645
                    ],
                    [
                        652
                    ],
                    [
                        653
                    ],
                    [
                        654
                    ]
                ],
                "inserts": [
                    [
                        647,
                        648,
                        649
                    ],
                    [
                        656,
                        657,
                        658
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n@@ -640,18 +640,18 @@ private static void modify(Calendar val, int field, boolean round) {\n         int millisecs = val.get(Calendar.MILLISECOND);\n         if (!round || millisecs < 500) {\n             time = time - millisecs;\n+        }\n         if (field == Calendar.SECOND) {\n             done = true;\n-            }\n         }\n \n         // truncate seconds\n         int seconds = val.get(Calendar.SECOND);\n         if (!done && (!round || seconds < 30)) {\n             time = time - (seconds * 1000L);\n+        }\n         if (field == Calendar.MINUTE) {\n             done = true;\n-            }\n         }\n \n         // truncate minutes\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.time.DateUtilsTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Minute Round Up Failed expected:<Mon Jul 02 08:09:00 PDT 2007> but was:<Mon Jul 02 08:01:00 PDT 2007>",
                "methodName": "testRoundLang346"
            }
        ],
        "metrics": {
            "chunks": 4,
            "classes": 1,
            "files": 1,
            "linesAdd": 2,
            "linesMod": 0,
            "linesRem": 2,
            "methods": 1,
            "sizeInLines": 4,
            "spreadAllLines": 10,
            "spreadCodeOnly": 8
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [],
        "repairPatterns": [
            "codeMove",
            "copyPaste",
            "unwrapIfElse"
        ],
        "repairTools": [
            "rtDynaMoth",
            "rtNopol"
        ],
        "revisionId": "d3b1163073c7aeb6011a5b65bfadad15bfc0f108"
    },
    {
        "bugId": 54,
        "changedFiles": {
            "org/apache/commons/lang/LocaleUtils.java": {
                "inserts": [
                    [
                        114
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -111,6 +111,9 @@ public static Locale toLocale(String str) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             char ch3 = str.charAt(3);\n+            if (ch3 == '_') {\n+                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n+            }\n             char ch4 = str.charAt(4);\n             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.LocaleUtilsTest",
                "error": "java.lang.IllegalArgumentException",
                "message": "Invalid locale format: fr__POSIX",
                "methodName": "testLang328"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 3,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 3,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condBranIfAdd",
            "mcAdd",
            "objInstAdd",
            "retBranchAdd"
        ],
        "repairPatterns": [
            "condBlockRetAdd",
            "missComp"
        ],
        "repairTools": [],
        "revisionId": "e89e8d62b911340cc5b293465cdae909f3dfd640"
    },
    {
        "bugId": 55,
        "changedFiles": {
            "org/apache/commons/lang/time/StopWatch.java": {
                "inserts": [
                    [
                        118
                    ],
                    [
                        119
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/time/StopWatch.java\n+++ b/src/java/org/apache/commons/lang/time/StopWatch.java\n@@ -115,7 +115,9 @@ public void stop() {\n         if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {\n             throw new IllegalStateException(\"Stopwatch is not running. \");\n         }\n+        if(this.runningState == STATE_RUNNING) {\n             stopTime = System.currentTimeMillis();\n+        }\n         this.runningState = STATE_STOPPED;\n     }\n \n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.time.StopWatchTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "",
                "methodName": "testLang315"
            }
        ],
        "metrics": {
            "chunks": 2,
            "classes": 1,
            "files": 1,
            "linesAdd": 2,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 2,
            "spreadAllLines": 1,
            "spreadCodeOnly": 1
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condBranIfAdd"
        ],
        "repairPatterns": [
            "wrapsIf"
        ],
        "repairTools": [
            "rtDynaMoth",
            "rtJAID"
        ],
        "revisionId": "3ef8a796b5ddf87e3e9afec9ba94aac62681b394"
    },
    {
        "bugId": 56,
        "changedFiles": {
            "org/apache/commons/lang/time/FastDateFormat.java": {
                "changes": [
                    [
                        140
                    ],
                    [
                        144
                    ]
                ],
                "inserts": [
                    [
                        1022
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang/time/FastDateFormat.java\n@@ -1,152 +1,152 @@\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one or more\n  * contributor license agreements.  See the NOTICE file distributed with\n  * this work for additional information regarding copyright ownership.\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n  * \n  *      http://www.apache.org/licenses/LICENSE-2.0\n  * \n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n package org.apache.commons.lang.time;\n \n import java.io.IOException;\n import java.io.ObjectInputStream;\n \n import java.text.DateFormat;\n import java.text.DateFormatSymbols;\n import java.text.FieldPosition;\n import java.text.Format;\n import java.text.ParsePosition;\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.TimeZone;\n \n import org.apache.commons.lang.Validate;\n \n /**\n  * <p>FastDateFormat is a fast and thread-safe version of\n  * {@link java.text.SimpleDateFormat}.</p>\n  * \n  * <p>This class can be used as a direct replacement to\n  * <code>SimpleDateFormat</code> in most formatting situations.\n  * This class is especially useful in multi-threaded server environments.\n  * <code>SimpleDateFormat</code> is not thread-safe in any JDK version,\n  * nor will it be as Sun have closed the bug/RFE.\n  * </p>\n  *\n  * <p>Only formatting is supported, but all patterns are compatible with\n  * SimpleDateFormat (except time zones - see below).</p>\n  *\n  * <p>Java 1.4 introduced a new pattern letter, <code>'Z'</code>, to represent\n  * time zones in RFC822 format (eg. <code>+0800</code> or <code>-1100</code>).\n  * This pattern letter can be used here (on all JDK versions).</p>\n  *\n  * <p>In addition, the pattern <code>'ZZ'</code> has been made to represent\n  * ISO8601 full format time zones (eg. <code>+08:00</code> or <code>-11:00</code>).\n  * This introduces a minor incompatibility with Java 1.4, but at a gain of\n  * useful functionality.</p>\n  *\n  * @author TeaTrove project\n  * @author Brian S O'Neill\n  * @author Sean Schofield\n  * @author Gary Gregory\n  * @author Stephen Colebourne\n  * @author Nikolay Metchev\n  * @since 2.0\n  * @version $Id$\n  */\n public class FastDateFormat extends Format {\n     // A lot of the speed in this class comes from caching, but some comes\n     // from the special int to StringBuffer conversion.\n     //\n     // The following produces a padded 2 digit number:\n     //   buffer.append((char)(value / 10 + '0'));\n     //   buffer.append((char)(value % 10 + '0'));\n     //\n     // Note that the fastest append to StringBuffer is a single char (used here).\n     // Note that Integer.toString() is not called, the conversion is simply\n     // taking the value and adding (mathematically) the ASCII value for '0'.\n     // So, don't change this code! It works and is very fast.\n     \n     /**\n      * Required for serialization support.\n      * \n      * @see java.io.Serializable\n      */\n     private static final long serialVersionUID = 1L;\n \n     /**\n      * FULL locale dependent date or time style.\n      */\n     public static final int FULL = DateFormat.FULL;\n     /**\n      * LONG locale dependent date or time style.\n      */\n     public static final int LONG = DateFormat.LONG;\n     /**\n      * MEDIUM locale dependent date or time style.\n      */\n     public static final int MEDIUM = DateFormat.MEDIUM;\n     /**\n      * SHORT locale dependent date or time style.\n      */\n     public static final int SHORT = DateFormat.SHORT;\n     \n     private static String cDefaultPattern;\n \n     private static Map cInstanceCache = new HashMap(7);\n     private static Map cDateInstanceCache = new HashMap(7);\n     private static Map cTimeInstanceCache = new HashMap(7);\n     private static Map cDateTimeInstanceCache = new HashMap(7);\n     private static Map cTimeZoneDisplayCache = new HashMap(7);\n \n     /**\n      * The pattern.\n      */\n     private final String mPattern;\n     /**\n      * The time zone.\n      */\n     private final TimeZone mTimeZone;\n     /**\n      * Whether the time zone overrides any on Calendars.\n      */\n     private final boolean mTimeZoneForced;\n     /**\n      * The locale.\n      */\n     private final Locale mLocale;\n     /**\n      * Whether the locale overrides the default.\n      */\n     private final boolean mLocaleForced;\n     /**\n      * The parsed rules.\n      */\n-    private Rule[] mRules;\n+    private transient Rule[] mRules;\n     /**\n      * The estimated maximum length.\n      */\n-    private int mMaxLengthEstimate;\n+    private transient int mMaxLengthEstimate;\n \n     //-----------------------------------------------------------------------\n     /**\n      * <p>Gets a formatter instance using the default pattern in the\n      * default locale.</p>\n      * \n      * @return a date/time formatter\n      */\n@@ -1016,37 +1016,41 @@ public int hashCode() {\n     public String toString() {\n         return \"FastDateFormat[\" + mPattern + \"]\";\n     }\n \n     // Serializing\n     //-----------------------------------------------------------------------\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        init();\n+    }\n     \n     // Rules\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Inner class defining a rule.</p>\n      */\n     private interface Rule {\n         /**\n          * Returns the estimated lentgh of the result.\n          * \n          * @return the estimated length\n          */\n         int estimateLength();\n         \n         /**\n          * Appends the value of the specified calendar to the output buffer based on the rule implementation.\n          * \n          * @param buffer the output buffer\n          * @param calendar calendar to be appended\n          */\n         void appendTo(StringBuffer buffer, Calendar calendar);\n     }\n \n     /**\n      * <p>Inner class defining a numeric rule.</p>\n      */\n     private interface NumberRule extends Rule {\n         /**\n          * Appends the specified value to the output buffer based on the rule implementation.\n          * \n          * @param buffer the output buffer\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.time.FastDateFormatTest",
                "error": "org.apache.commons.lang.SerializationException",
                "message": "java.io.NotSerializableException: org.apache.commons.lang.time.FastDateFormat$PaddedNumberField",
                "methodName": "testLang303"
            }
        ],
        "metrics": {
            "chunks": 3,
            "classes": 1,
            "files": 1,
            "linesAdd": 4,
            "linesMod": 2,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 6,
            "spreadAllLines": 880,
            "spreadCodeOnly": 425
        },
        "observations": "Changes types modifiers and overrides method related to Serialization.",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "mcAdd",
            "mdAdd",
            "mdOverride",
            "varModChange"
        ],
        "repairPatterns": [
            "missComp",
            "notClassified"
        ],
        "repairTools": [],
        "revisionId": "672e3a8ead2970181c32cf5fc70a3ea3d020c1fc"
    },
    {
        "bugId": 57,
        "changedFiles": {
            "org/apache/commons/lang/LocaleUtils.java": {
                "changes": [
                    [
                        223
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -220,7 +220,7 @@ public static Set availableLocaleSet() {\n      * @return true if the locale is a known locale\n      */\n     public static boolean isAvailableLocale(Locale locale) {\n-        return cAvailableLocaleSet.contains(locale);\n+        return availableLocaleList().contains(locale);\n     }\n \n     //-----------------------------------------------------------------------\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.LocaleUtilsTest",
                "error": "java.lang.NullPointerException",
                "message": "",
                "methodName": "testAvailableLocaleSet"
            },
            {
                "className": " org.apache.commons.lang.LocaleUtilsTest",
                "error": "java.lang.NullPointerException",
                "message": "",
                "methodName": "testIsAvailableLocale"
            },
            {
                "className": " org.apache.commons.lang.LocaleUtilsTest",
                "error": "java.lang.NullPointerException",
                "message": "",
                "methodName": "testAvailableLocaleList"
            },
            {
                "className": " org.apache.commons.lang.LocaleUtilsTest",
                "error": "java.lang.NullPointerException",
                "message": "",
                "methodName": "testCountriesByLanguage"
            },
            {
                "className": " org.apache.commons.lang.LocaleUtilsTest",
                "error": "java.lang.NullPointerException",
                "message": "",
                "methodName": "testLocaleLookupList_LocaleLocale"
            },
            {
                "className": " org.apache.commons.lang.LocaleUtilsTest",
                "error": "java.lang.NullPointerException",
                "message": "",
                "methodName": "testLanguagesByCountry"
            },
            {
                "className": " org.apache.commons.lang.LocaleUtilsTest",
                "error": "java.lang.NullPointerException",
                "message": "",
                "methodName": "testToLocale_1Part"
            },
            {
                "className": " org.apache.commons.lang.LocaleUtilsTest",
                "error": "java.lang.NullPointerException",
                "message": "",
                "methodName": "testToLocale_2Part"
            },
            {
                "className": " org.apache.commons.lang.LocaleUtilsTest",
                "error": "java.lang.NullPointerException",
                "message": "",
                "methodName": "testToLocale_3Part"
            },
            {
                "className": " org.apache.commons.lang.LocaleUtilsTest",
                "error": "java.lang.NullPointerException",
                "message": "",
                "methodName": "testLocaleLookupList_Locale"
            },
            {
                "className": " org.apache.commons.lang.LocaleUtilsTest",
                "error": "java.lang.NullPointerException",
                "message": "",
                "methodName": "testConstructor"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 0,
            "linesMod": 1,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 1,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "Changes direct acces of an object to method call.",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "mcAdd",
            "retExpChange",
            "varReplMc"
        ],
        "repairPatterns": [
            "singleLine",
            "wrongVarRef"
        ],
        "repairTools": [
            "rtElixir",
            "rtHDRepair"
        ],
        "revisionId": "bbd990b81fd7f8ab9dde75c8070b973b9ce500fc"
    },
    {
        "bugId": 58,
        "changedFiles": {
            "org/apache/commons/lang/math/NumberUtils.java": {
                "changes": [
                    [
                        454
                    ],
                    [
                        455
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,8 +451,7 @@ public static Number createNumber(String str) throws NumberFormatException {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n-                        && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.math.NumberUtilsTest",
                "error": "java.lang.NumberFormatException",
                "message": "1l is not a valid number.",
                "methodName": "testLang300"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 0,
            "linesMod": 1,
            "linesRem": 1,
            "methods": 1,
            "sizeInLines": 2,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "condExpMod"
        ],
        "repairPatterns": [
            "expLogicMod"
        ],
        "repairTools": [
            "rtDynaMoth",
            "rtElixir",
            "rtNopol"
        ],
        "revisionId": "1fd45a4f68ea497dfbdf1a67b8b8805a4a9b1166"
    },
    {
        "bugId": 59,
        "changedFiles": {
            "org/apache/commons/lang/text/StrBuilder.java": {
                "changes": [
                    [
                        884
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n@@ -881,7 +881,7 @@ public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar)\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n-                str.getChars(0, strLen, buffer, size);\n+                str.getChars(0, width, buffer, size);\n             } else {\n                 int padLen = width - strLen;\n                 str.getChars(0, strLen, buffer, size);\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.text.StrBuilderAppendInsertTest",
                "error": "java.lang.ArrayIndexOutOfBoundsException",
                "message": "",
                "methodName": "testLang299"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 0,
            "linesMod": 1,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 1,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "mcParValChange",
            "varReplVar"
        ],
        "repairPatterns": [
            "singleLine",
            "wrongComp",
            "wrongVarRef"
        ],
        "repairTools": [
            "rtElixir",
            "rtssFix"
        ],
        "revisionId": "c04cd2337786ce7d54ed1fb757192fb8bc8c5e41"
    },
    {
        "bugId": 60,
        "changedFiles": {
            "org/apache/commons/lang/text/StrBuilder.java": {
                "changes": [
                    [
                        1673
                    ],
                    [
                        1730
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n@@ -1670,7 +1670,7 @@ public String midString(int index, int length) {\n      */\n     public boolean contains(char ch) {\n         char[] thisBuf = buffer;\n-        for (int i = 0; i < thisBuf.length; i++) {\n+        for (int i = 0; i < this.size; i++) {\n             if (thisBuf[i] == ch) {\n                 return true;\n             }\n@@ -1727,7 +1727,7 @@ public int indexOf(char ch, int startIndex) {\n             return -1;\n         }\n         char[] thisBuf = buffer;\n-        for (int i = startIndex; i < thisBuf.length; i++) {\n+        for (int i = startIndex; i < size; i++) {\n             if (thisBuf[i] == ch) {\n                 return i;\n             }\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.text.StrBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "The contains(char) method is looking beyond the end of the string",
                "methodName": "testLang295"
            }
        ],
        "metrics": {
            "chunks": 2,
            "classes": 1,
            "files": 1,
            "linesAdd": 0,
            "linesMod": 2,
            "linesRem": 0,
            "methods": 2,
            "sizeInLines": 2,
            "spreadAllLines": 56,
            "spreadCodeOnly": 21
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "loopCondChange",
            "varReplVar"
        ],
        "repairPatterns": [
            "expLogicMod",
            "wrongVarRef"
        ],
        "repairTools": [],
        "revisionId": "a8203b65261110c4a30ff69fe0da7a2390d82757"
    },
    {
        "bugId": 61,
        "changedFiles": {
            "org/apache/commons/lang/text/StrBuilder.java": {
                "changes": [
                    [
                        1776
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n@@ -1773,7 +1773,7 @@ public int indexOf(String str, int startIndex) {\n             return -1;\n         }\n         char[] thisBuf = buffer;\n-        int len = thisBuf.length - strLen;\n+        int len = size - strLen + 1;\n         outer:\n         for (int i = startIndex; i < len; i++) {\n             for (int j = 0; j < strLen; j++) {\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.text.StrBuilderTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "expected:<-1> but was:<6>",
                "methodName": "testIndexOfLang294"
            },
            {
                "className": " org.apache.commons.lang.text.StrBuilderTest",
                "error": "java.lang.ArrayIndexOutOfBoundsException",
                "message": "",
                "methodName": "testLang294"
            }
        ],
        "metrics": {
            "chunks": 1,
            "classes": 1,
            "files": 1,
            "linesAdd": 0,
            "linesMod": 1,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 1,
            "spreadAllLines": 0,
            "spreadCodeOnly": 0
        },
        "observations": "Changes/fix computing of a variable.",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignExpChange",
            "varReplVar"
        ],
        "repairPatterns": [
            "expArithMod",
            "singleLine",
            "wrongComp",
            "wrongVarRef"
        ],
        "repairTools": [
            "rtJAID"
        ],
        "revisionId": "88c76d207f642831ca899e144159424aaa60cf8e"
    },
    {
        "bugId": 62,
        "changedFiles": {
            "org/apache/commons/lang/Entities.java": {
                "inserts": [
                    [
                        850
                    ],
                    [
                        920
                    ],
                    [
                        925
                    ],
                    [
                        926
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/Entities.java\n+++ b/src/java/org/apache/commons/lang/Entities.java\n@@ -847,6 +847,9 @@ public String unescape(String str) {\n                             } else {\n                                 entityValue = Integer.parseInt(entityName.substring(1));\n                             }\n+                            if (entityValue > 0xFFFF) {\n+                                entityValue = -1;\n+                            }\n                         } catch (NumberFormatException ex) {\n                             entityValue = -1;\n                         }\n@@ -917,12 +920,17 @@ public void unescape(Writer writer, String string) throws IOException {\n                                     case 'X' :\n                                     case 'x' : {\n                                         entityValue = Integer.parseInt(entityContent.substring(2), 16);\n+                                        break;\n                                     }\n                                     default : {\n                                         entityValue = Integer.parseInt(entityContent.substring(1), 10);\n                                     }\n                                 }\n+                                if (entityValue > 0xFFFF) {\n+                                    entityValue = -1;\n+                                }\n                             } catch (NumberFormatException e) {\n+                                entityValue = -1;\n                             }\n                         }\n                     } else { //escaped value content is an entity name\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.EntitiesTest",
                "error": "junit.framework.ComparisonFailure",
                "message": "expected:<[&#12345678;]> but was:<[\u614e]>",
                "methodName": "testNumberOverflow"
            }
        ],
        "metrics": {
            "chunks": 4,
            "classes": 1,
            "files": 1,
            "linesAdd": 8,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 8,
            "spreadAllLines": 76,
            "spreadCodeOnly": 61
        },
        "observations": "Added a \"break\" in \"case\" branch.",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignAdd",
            "condBranIfAdd"
        ],
        "repairPatterns": [
            "condBlockOthersAdd",
            "copyPaste",
            "missComp"
        ],
        "repairTools": [],
        "revisionId": "1313a65c11dea54f1baf492d4185fb2d673b6716"
    },
    {
        "bugId": 63,
        "changedFiles": {
            "org/apache/commons/lang/time/DurationFormatUtils.java": {
                "changes": [
                    [
                        306
                    ]
                ],
                "deletes": [
                    [
                        318
                    ],
                    [
                        319
                    ],
                    [
                        320
                    ],
                    [
                        321
                    ],
                    [
                        322
                    ],
                    [
                        323
                    ],
                    [
                        324
                    ],
                    [
                        431
                    ],
                    [
                        432
                    ],
                    [
                        433
                    ],
                    [
                        434
                    ],
                    [
                        435
                    ],
                    [
                        436
                    ],
                    [
                        437
                    ],
                    [
                        438
                    ],
                    [
                        439
                    ],
                    [
                        440
                    ],
                    [
                        441
                    ],
                    [
                        442
                    ]
                ],
                "inserts": [
                    [
                        307,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n@@ -303,25 +303,20 @@ public static String formatPeriod(long startMillis, long endMillis, String forma\n             days -= 1;\n         }\n         while (days < 0) {\n-            days += 31;\n+            end.add(Calendar.MONTH, -1);\n+            days += end.getActualMaximum(Calendar.DAY_OF_MONTH);\n //days += 31; // TODO: Need tests to show this is bad and the new code is good.\n // HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is \n // 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.\n // Also it's contextual - if asked for no M in the format then I should probably \n // be doing no calculating here.\n             months -= 1;\n+            end.add(Calendar.MONTH, 1);\n         }\n         while (months < 0) {\n             months += 12;\n             years -= 1;\n         }\n-        milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);\n-        seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);\n-        minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);\n-        hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);\n-        days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);\n-        months -= reduceAndCorrect(start, end, Calendar.MONTH, months);\n-        years -= reduceAndCorrect(start, end, Calendar.YEAR, years);\n \n         // This next block of code adds in values that \n         // aren't requested. This allows the user to ask for the \n@@ -429,18 +424,6 @@ static String format(Token[] tokens, int years, int months, int days, int hours,\n         }\n         return buffer.toString();\n     }\n-    static int reduceAndCorrect(Calendar start, Calendar end, int field, int difference) {\n-        end.add( field, -1 * difference );\n-        int endValue = end.get(field);\n-        int startValue = start.get(field);\n-        if (endValue < startValue) {\n-            int newdiff = startValue - endValue;\n-            end.add( field, newdiff );\n-            return newdiff;\n-        } else {\n-            return 0;\n-        }\n-    }\n \n     static final Object y = \"y\";\n     static final Object M = \"M\";\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.time.DurationFormatUtilsTest",
                "error": "junit.framework.ComparisonFailure",
                "message": "expected:<[09]> but was:<[-2]>",
                "methodName": "testJiraLang281"
            }
        ],
        "metrics": {
            "chunks": 4,
            "classes": 1,
            "files": 1,
            "linesAdd": 2,
            "linesMod": 1,
            "linesRem": 19,
            "methods": 2,
            "sizeInLines": 22,
            "spreadAllLines": 118,
            "spreadCodeOnly": 91
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignExpChange",
            "assignRem",
            "condBranRem",
            "mcAdd",
            "mcRem",
            "mdRem",
            "retRem",
            "varRem"
        ],
        "repairPatterns": [
            "blockRemove",
            "expArithMod",
            "fixAPI",
            "wrongComp"
        ],
        "repairTools": [
            "rtDynaMoth"
        ],
        "revisionId": "0695c3f71e3fc5abe29d8b9b33eed7faac7e73bf"
    },
    {
        "bugId": 64,
        "changedFiles": {
            "org/apache/commons/lang/enums/ValuedEnum.java": {
                "inserts": [
                    [
                        183
                    ],
                    [
                        195
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/enums/ValuedEnum.java\n+++ b/src/java/org/apache/commons/lang/enums/ValuedEnum.java\n@@ -180,6 +180,16 @@ public final int getValue() {\n      * @throws NullPointerException if other is <code>null</code>\n      */\n     public int compareTo(Object other) {\n+        if (other == this) {\n+            return 0;\n+        }\n+        if (other.getClass() != this.getClass()) {\n+            if (other.getClass().getName().equals(this.getClass().getName())) {\n+                return iValue - getValueInOtherClassLoader(other);\n+            }\n+            throw new ClassCastException(\n+                    \"Different enum class '\" + ClassUtils.getShortClassName(other.getClass()) + \"'\");\n+        }\n         return iValue - ((ValuedEnum) other).iValue;\n     }\n \n@@ -189,9 +199,20 @@ public int compareTo(Object other) {\n      * @param other  the object to determine the value for\n      * @return the value\n      */\n+    private int getValueInOtherClassLoader(Object other) {\n+        try {\n+            Method mth = other.getClass().getMethod(\"getValue\", null);\n+            Integer value = (Integer) mth.invoke(other, null);\n+            return value.intValue();\n+        } catch (NoSuchMethodException e) {\n             // ignore - should never happen\n+        } catch (IllegalAccessException e) {\n             // ignore - should never happen\n+        } catch (InvocationTargetException e) {\n             // ignore - should never happen\n+        }\n+        throw new IllegalStateException(\"This should not happen\");\n+    }\n \n     /**\n      * <p>Human readable description of this <code>Enum</code> item.</p>\n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.enums.ValuedEnumTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "",
                "methodName": "testCompareTo_otherEnumType"
            }
        ],
        "metrics": {
            "chunks": 5,
            "classes": 1,
            "files": 1,
            "linesAdd": 21,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 2,
            "sizeInLines": 21,
            "spreadAllLines": 12,
            "spreadCodeOnly": 2
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignAdd",
            "condBranIfAdd",
            "exThrowsAdd",
            "exTryCatchAdd",
            "mcAdd",
            "mdAdd",
            "objInstAdd",
            "retBranchAdd",
            "varAdd"
        ],
        "repairPatterns": [
            "condBlockExcAdd",
            "condBlockOthersAdd",
            "condBlockRetAdd",
            "missComp"
        ],
        "repairTools": [],
        "revisionId": "8de71ae52958ae70fe651b7327319c9beecd9b84"
    },
    {
        "bugId": 65,
        "changedFiles": {
            "org/apache/commons/lang/time/DateUtils.java": {
                "inserts": [
                    [
                        623,
                        624,
                        625,
                        626,
                        627,
                        628,
                        629,
                        630,
                        631,
                        632,
                        633,
                        634,
                        635,
                        636,
                        637,
                        638,
                        639,
                        640,
                        641
                    ],
                    [
                        708,
                        709
                    ],
                    [
                        710
                    ]
                ]
            }
        },
        "diff": "--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n@@ -621,6 +621,9 @@ private static void modify(Calendar val, int field, boolean round) {\n             throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n         }\n         \n+        if (field == Calendar.MILLISECOND) {\n+            return;\n+        }\n \n         // ----------------- Fix for LANG-59 ---------------------- START ---------------\n         // see http://issues.apache.org/jira/browse/LANG-59\n@@ -628,14 +631,39 @@ private static void modify(Calendar val, int field, boolean round) {\n         // Manually truncate milliseconds, seconds and minutes, rather than using\n         // Calendar methods.\n \n+        Date date = val.getTime();\n+        long time = date.getTime();\n+        boolean done = false;\n \n         // truncate milliseconds\n+        int millisecs = val.get(Calendar.MILLISECOND);\n+        if (!round || millisecs < 500) {\n+            time = time - millisecs;\n+            if (field == Calendar.SECOND) {\n+                done = true;\n+            }\n+        }\n \n         // truncate seconds\n+        int seconds = val.get(Calendar.SECOND);\n+        if (!done && (!round || seconds < 30)) {\n+            time = time - (seconds * 1000L);\n+            if (field == Calendar.MINUTE) {\n+                done = true;\n+            }\n+        }\n \n         // truncate minutes\n+        int minutes = val.get(Calendar.MINUTE);\n+        if (!done && (!round || minutes < 30)) {\n+            time = time - (minutes * 60000L);\n+        }\n \n         // reset time\n+        if (date.getTime() != time) {\n+            date.setTime(time);\n+            val.setTime(date);\n+        }\n         // ----------------- Fix for LANG-59 ----------------------- END ----------------\n \n         boolean roundUp = false;\n@@ -706,7 +734,9 @@ private static void modify(Calendar val, int field, boolean round) {\n                 roundUp = offset > ((max - min) / 2);\n             }\n             //We need to remove this field\n+            if (offset != 0) {\n                 val.set(fields[i][0], val.get(fields[i][0]) - offset);\n+            }\n         }\n         throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n \n",
        "failingTests": [
            {
                "className": " org.apache.commons.lang.time.DateUtilsTest",
                "error": "junit.framework.AssertionFailedError",
                "message": "Truncate Calendar.SECOND expected:<Sun Oct 31 01:02:03 MDT 2004> but was:<Sun Oct 31 01:02:03 MST 2004>",
                "methodName": "testTruncateLang59"
            }
        ],
        "metrics": {
            "chunks": 8,
            "classes": 1,
            "files": 1,
            "linesAdd": 30,
            "linesMod": 0,
            "linesRem": 0,
            "methods": 1,
            "sizeInLines": 30,
            "spreadAllLines": 86,
            "spreadCodeOnly": 50
        },
        "observations": "",
        "program": "commons-lang",
        "project": "Lang",
        "repairActions": [
            "assignAdd",
            "condBranIfAdd",
            "mcAdd",
            "retBranchAdd",
            "varAdd"
        ],
        "repairPatterns": [
            "condBlockOthersAdd",
            "condBlockRetAdd",
            "missComp",
            "wrapsIf"
        ],
        "repairTools": [],
        "revisionId": "bb1671667d9085fb76bd06af7f7ad91d2c1c8389"
    }
]